import fitz  # PyMuPDF
import re
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
from reportlab.lib.colors import HexColor
from reportlab.graphics import renderPM
from reportlab.graphics.shapes import Drawing
from reportlab.graphics import renderPDF
from reportlab.lib.units import inch
from reportlab.graphics.barcode import code128
from reportlab.graphics.barcode import qr
from PIL import Image, ImageDraw, ImageFont

def extract_data_from_pdf(pdf_path):
    doc = fitz.open(pdf_path)
    text = ""
    for page in doc:
        text += page.get_text()

    name_pattern = r"Name: (.*?)\n"
    date_pattern = r"Date: (.*?)\n"
    id_pattern = r"ID: (.*?)\n"

    name = re.search(name_pattern, text).group(1) if re.search(name_pattern, text) else "Unknown"
    date = re.search(date_pattern, text).group(1) if re.search(date_pattern, text) else "Unknown"
    id = re.search(id_pattern, text).group(1) if re.search(id_pattern, text) else "Unknown"

    return {"name": name, "date": date, "id": id}

def create_template(output_path, data):
    c = canvas.Canvas(output_path, pagesize=letter)
    width, height = letter

    # Add logo
    logo = ImageReader("logo.png")
    c.drawImage(logo, inch, height - inch * 1.5, inch * 2, inch * 2)

    # Add title
    c.setFont("Helvetica-Bold", 24)
    c.drawCentredString(width / 2.0, height - inch * 2.5, "Official Permit")

    # Add data
    c.setFont("Helvetica", 12)
    c.drawString(inch, height - inch * 3.5, f"Name: {data['name']}")
    c.drawString(inch, height - inch * 4, f"Date: {data['date']}")
    c.drawString(inch, height - inch * 4.5, f"ID: {data['id']}")

    # Add watermark
    c.setFont("Helvetica", 50)
    c.setFillColor(HexColor("#dddddd"))
    c.drawString(width / 2.0, height / 2.0, "OFFICIAL")

    # Add barcode
    barcode = code128.Code128(data['id'], barWidth=0.5 * inch, barHeight=0.2 * inch)
    barcode.drawOn(c, inch, height - inch * 5.5)

    # Add QR code
    qr_code = qr.QrCodeWidget(data['id'])
    bounds = qr_code.getBounds()
    width = bounds[2] - bounds[0]
    height = bounds[3] - bounds[1]
    d = Drawing(50, 50, transform=[50./width, 0, 0, 50./height, inch, height - inch * 6.5])
    d.add(qr_code)
    renderPDF.draw(d, c, inch, height - inch * 7.5)

    # Add official stamp
    stamp = ImageReader("official_stamp.png")
    c.drawImage(stamp, width - inch * 3, inch, inch * 2, inch * 2)

    c.save()

def add_holographic_effect(image_path, output_path):
    image = Image.open(image_path)
    draw = ImageDraw.Draw(image)
    font = ImageFont.truetype("arial.ttf", 40)
    draw.text((10, 10), "HOLOGRAM", font=font, fill=(255, 255, 255))
    image.save(output_path)

def add_braille(text, output_path):
    c = canvas.Canvas(output_path, pagesize=letter)
    width, height = letter

    # Simple Braille pattern (this is a placeholder for actual Braille encoding)
    braille_pattern = """
    ..O.
    O..O
    ..O.
    O..O
    ..O.
    O..O
    """
    braille_lines = braille_pattern.split('\n')
    braille_height = len(braille_lines)
    braille_width = len(braille_lines[0])

    cell_size = 0.1 * inch
    start_x = inch
    start_y = height - inch * 8

    for i, line in enumerate(braille_lines):
        for j, char in enumerate(line):
            if char == 'O':
                c.setFillColor(HexColor("#000000"))
                c.rect(start_x + j * cell_size, start_y - i * cell_size, cell_size, cell_size, fill=1)

    c.save()

def generate_final_document(output_path, data):
    c = canvas.Canvas(output_path, pagesize=letter)
    width, height = letter

    # Add logo
    logo = ImageReader("logo.png")
    c.drawImage(logo, inch, height - inch * 1.5, inch * 2, inch * 2)

    # Add title
    c.setFont("Helvetica-Bold", 24)
    c.drawCentredString(width / 2.0, height - inch * 2.5, "Official Permit")

    # Add data
    c.setFont("Helvetica", 12)
    c.drawString(inch, height - inch * 3.5, f"Name: {data['name']}")
    c.drawString(inch, height - inch * 4, f"Date: {data['date']}")
    c.drawString(inch, height - inch * 4.5, f"ID: {data['id']}")

    # Add watermark
    c.setFont("Helvetica", 50)
    c.setFillColor(HexColor("#dddddd"))
    c.drawString(width / 2.0, height / 2.0, "OFFICIAL")

    # Add barcode
    barcode = code128.Code128(data['id'], barWidth=0.5 * inch, barHeight=0.2 * inch)
    barcode.drawOn(c, inch, height - inch * 5.5)

    # Add QR code
    qr_code = qr.QrCodeWidget(data['id'])
    bounds = qr_code.getBounds()
    width = bounds[2] - bounds[0]
    height = bounds[3] - bounds[1]
    d = Drawing(50, 50, transform=[50./width, 0, 0, 50./height, inch, height - inch * 6.5])
    d.add(qr_code)
    renderPDF.draw(d, c, inch, height - inch * 7.5)

    # Add official stamp
    stamp = ImageReader("official_stamp.png")
    c.drawImage(stamp, width - inch * 3, inch, inch * 2, inch * 2)

    # Add holographic effect
    hologram = ImageReader("hologram_with_effect.png")
    c.drawImage(hologram, inch, height - inch * 10, inch * 2, inch * 2)

    # Add Braille encoding
    braille_canvas = canvas.Canvas("braille_temp.pdf", pagesize=letter)
    braille_pattern = """
    ..O.
    O..O
    ..O.
    O..O
    ..O.
    O..O
    """
    braille_lines = braille_pattern.split('\n')
    braille_height = len(braille_lines)
    braille_width = len(braille_lines[0])

    cell_size = 0.1 * inch
    start_x = inch
    start_y = height - inch * 8

    for i, line in enumerate(braille_lines):
        for j, char in enumerate(line):
            if char == 'O':
                braille_canvas.setFillColor(HexColor("#000000"))
                braille_canvas.rect(start_x + j * cell_size, start_y - i * cell_size, cell_size, cell_size, fill=1)

    braille_canvas.save()
    braille_pdf = "braille_temp.pdf"
    braille_page = ImageReader(braille_pdf)
    c.drawImage(braille_page, inch, height - inch * 12, inch * 2, inch * 2)

    c.save()

pdf_path = "birth_certificate_D9BB9F7E72F23EEEC87967FC74C7A709.pdf"
data = extract_data_from_pdf(pdf_path)
output_path = "official_permit.pdf"
create_template(output_path, data)
add_holographic_effect("hologram.png", "hologram_with_effect.png")
add_braille("Braille Example", "braille_example.pdf")
generate_final_document(output_path, data)