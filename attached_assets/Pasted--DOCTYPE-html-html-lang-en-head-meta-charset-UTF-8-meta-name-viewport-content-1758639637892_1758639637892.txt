<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced Regenerative Medicine Lab - Formula Discovery Platform</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0a0e1a 0%, #1a1f2e 50%, #0f1419 100%);
            color: white;
            overflow-x: hidden;
        }

        .lab-container {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .header {
            background: rgba(0, 0, 0, 0.9);
            padding: 20px;
            border-bottom: 3px solid #00d4ff;
            text-align: center;
        }

        .header h1 {
            font-size: 28px;
            color: #00d4ff;
            margin-bottom: 10px;
        }

        .header p {
            color: #a0a0a0;
            font-size: 16px;
        }

        .main-lab {
            flex: 1;
            display: grid;
            grid-template-columns: 350px 1fr 400px;
            gap: 20px;
            padding: 20px;
            height: calc(100vh - 100px);
        }

        .patient-panel {
            background: rgba(15, 20, 25, 0.95);
            border: 2px solid #00d4ff;
            border-radius: 15px;
            padding: 20px;
            overflow-y: auto;
        }

        .simulation-area {
            background: radial-gradient(circle at center, #1a2332 0%, #0f1419 100%);
            border: 2px solid #00d4ff;
            border-radius: 15px;
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        .formula-lab {
            background: rgba(15, 20, 25, 0.95);
            border: 2px solid #00d4ff;
            border-radius: 15px;
            padding: 20px;
            overflow-y: auto;
        }

        .panel-title {
            color: #00ff88;
            font-size: 18px;
            margin-bottom: 20px;
            text-align: center;
            border-bottom: 2px solid #00ff88;
            padding-bottom: 10px;
        }

        .patient-selector {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .patient-card {
            background: rgba(0, 0, 0, 0.4);
            border: 2px solid transparent;
            border-radius: 10px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
        }

        .patient-card:hover {
            border-color: #00d4ff;
            background: rgba(0, 212, 255, 0.1);
        }

        .patient-card.selected {
            border-color: #00ff88;
            background: rgba(0, 255, 136, 0.2);
        }

        .patient-avatar {
            font-size: 40px;
            margin-bottom: 10px;
        }

        .patient-name {
            color: #00d4ff;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .patient-stats {
            font-size: 12px;
            color: #a0a0a0;
        }

        .body-part-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 20px;
        }

        .body-part {
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid #00d4ff;
            border-radius: 8px;
            padding: 10px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .body-part:hover {
            background: rgba(0, 212, 255, 0.1);
        }

        .body-part.selected {
            border-color: #00ff88;
            background: rgba(0, 255, 136, 0.2);
        }

        .patient-model {
            width: 300px;
            height: 400px;
            position: relative;
            animation: float 4s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotateY(0deg); }
            50% { transform: translateY(-10px) rotateY(5deg); }
        }

        .treatment-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }

        .formula-section {
            margin-bottom: 25px;
        }

        .section-header {
            color: #00d4ff;
            font-size: 16px;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .ingredient-mixer {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .ingredient-row {
            display: flex;
            align-items: center;
            background: rgba(0, 0, 0, 0.3);
            padding: 12px;
            border-radius: 8px;
            border: 1px solid rgba(0, 212, 255, 0.3);
        }

        .ingredient-name {
            flex: 1;
            color: #00ff88;
            font-size: 14px;
            font-weight: bold;
        }

        .ingredient-slider {
            width: 80px;
            height: 4px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 2px;
            outline: none;
            -webkit-appearance: none;
            margin: 0 10px;
        }

        .ingredient-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 12px;
            height: 12px;
            background: #00ff88;
            border-radius: 50%;
            cursor: pointer;
        }

        .ingredient-value {
            color: #00d4ff;
            font-size: 12px;
            min-width: 40px;
            text-align: center;
        }

        .environment-controls {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .control-group {
            background: rgba(0, 0, 0, 0.4);
            padding: 15px;
            border-radius: 10px;
            border: 1px solid #00d4ff;
        }

        .control-label {
            color: #00d4ff;
            font-size: 14px;
            margin-bottom: 10px;
        }

        .control-options {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .control-option {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(0, 212, 255, 0.3);
            border-radius: 6px;
            padding: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 12px;
        }

        .control-option:hover {
            background: rgba(0, 212, 255, 0.1);
        }

        .control-option.selected {
            border-color: #00ff88;
            background: rgba(0, 255, 136, 0.2);
        }

        .audio-therapy {
            background: rgba(0, 0, 0, 0.6);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            border: 2px solid #ff6b6b;
        }

        .frequency-display {
            text-align: center;
            margin-bottom: 15px;
        }

        .frequency-value {
            font-size: 24px;
            color: #ff6b6b;
            font-weight: bold;
        }

        .frequency-label {
            color: #a0a0a0;
            font-size: 12px;
        }

        .frequency-controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 15px;
        }

        .freq-btn {
            padding: 8px 12px;
            background: rgba(255, 107, 107, 0.2);
            border: 1px solid #ff6b6b;
            border-radius: 6px;
            color: #ff6b6b;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s ease;
        }

        .freq-btn:hover {
            background: rgba(255, 107, 107, 0.4);
        }

        .freq-btn.active {
            background: #ff6b6b;
            color: white;
        }

        .play-button {
            width: 100%;
            padding: 12px;
            background: linear-gradient(45deg, #ff6b6b, #ff8e8e);
            border: none;
            border-radius: 8px;
            color: white;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .play-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(255, 107, 107, 0.4);
        }

        .play-button.playing {
            background: linear-gradient(45deg, #00ff88, #00d4ff);
        }

        .simulation-controls {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 15px;
        }

        .sim-button {
            padding: 15px 25px;
            border: none;
            border-radius: 25px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .sim-button.primary {
            background: linear-gradient(45deg, #00d4ff, #00ff88);
            color: white;
        }

        .sim-button.secondary {
            background: rgba(255, 255, 255, 0.1);
            color: #00d4ff;
            border: 2px solid #00d4ff;
        }

        .sim-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 30px rgba(0, 212, 255, 0.4);
        }

        .results-panel {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.9);
            padding: 20px;
            border-radius: 15px;
            border: 2px solid #00ff88;
            min-width: 250px;
            display: none;
        }

        .results-panel.active {
            display: block;
        }

        .result-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            padding: 8px;
            background: rgba(0, 255, 136, 0.1);
            border-radius: 6px;
        }

        .result-label {
            color: #a0a0a0;
        }

        .result-value {
            color: #00ff88;
            font-weight: bold;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 4px;
            margin: 10px 0;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #00d4ff, #00ff88);
            width: 0%;
            transition: width 0.5s ease;
        }

        .particle {
            position: absolute;
            width: 4px;
            height: 4px;
            background: #00ff88;
            border-radius: 50%;
            pointer-events: none;
            animation: particle-float 3s linear infinite;
        }

        @keyframes particle-float {
            0% { transform: translateY(100px) scale(0); opacity: 0; }
            20% { opacity: 1; transform: scale(1); }
            80% { opacity: 1; }
            100% { transform: translateY(-100px) scale(0); opacity: 0; }
        }

        .conclusion-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .conclusion-content {
            background: linear-gradient(135deg, #1a2332, #0f1419);
            border: 3px solid #00ff88;
            border-radius: 20px;
            padding: 40px;
            max-width: 600px;
            text-align: center;
        }

        .conclusion-title {
            color: #00ff88;
            font-size: 24px;
            margin-bottom: 20px;
        }

        .conclusion-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 30px 0;
        }

        .stat-card {
            background: rgba(0, 0, 0, 0.4);
            padding: 20px;
            border-radius: 10px;
            border: 1px solid #00d4ff;
        }

        .stat-number {
            font-size: 32px;
            color: #00d4ff;
            font-weight: bold;
        }

        .stat-description {
            color: #a0a0a0;
            font-size: 14px;
            margin-top: 5px;
        }

        @media (max-width: 1200px) {
            .main-lab {
                grid-template-columns: 1fr;
                grid-template-rows: auto auto 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="lab-container">
        <div class="header">
            <h1>🧬 Regenerative Medicine Discovery Lab</h1>
            <p>Advanced Formula Testing & Simulation Platform - Real Scientific Results</p>
        </div>

        <div class="main-lab">
            <!-- Patient Selection Panel -->
            <div class="patient-panel">
                <div class="panel-title">👥 Patient Selection</div>
                
                <div class="patient-selector">
                    <div class="patient-card" data-patient="john">
                        <div class="patient-avatar">👨</div>
                        <div class="patient-name">John, 34</div>
                        <div class="patient-stats">Construction Worker<br>Recent Injury<br>Excellent Health</div>
                    </div>

                    <div class="patient-card" data-patient="maria">
                        <div class="patient-avatar">👩</div>
                        <div class="patient-name">Maria, 28</div>
                        <div class="patient-stats">Chef<br>Kitchen Accident<br>Good Health</div>
                    </div>

                    <div class="patient-card" data-patient="robert">
                        <div class="patient-avatar">👴</div>
                        <div class="patient-name">Robert, 67</div>
                        <div class="patient-stats">Retiree<br>Diabetic Complications<br>Compromised Health</div>
                    </div>

                    <div class="patient-card" data-patient="sarah">
                        <div class="patient-avatar">👧</div>
                        <div class="patient-name">Sarah, 12</div>
                        <div class="patient-stats">Student<br>Congenital Deficiency<br>Excellent Health</div>
                    </div>
                </div>

                <div class="panel-title" style="margin-top: 30px;">🫴 Treatment Area</div>
                
                <div class="body-part-grid">
                    <div class="body-part" data-bodypart="finger">☝️<br>Finger</div>
                    <div class="body-part" data-bodypart="thumb">👍<br>Thumb</div>
                    <div class="body-part" data-bodypart="toe">🦶<br>Toe</div>
                    <div class="body-part" data-bodypart="ear">👂<br>Ear</div>
                </div>
            </div>

            <!-- Simulation Area -->
            <div class="simulation-area">
                <div class="patient-model" id="patientModel">
                    <div style="text-align: center; color: #00d4ff; font-size: 18px;">
                        <div style="font-size: 64px; margin-bottom: 20px;">🫴</div>
                        <div>Select Patient & Body Part</div>
                        <div style="font-size: 14px; color: #a0a0a0; margin-top: 10px;">
                            Choose from the left panel to begin
                        </div>
                    </div>
                </div>

                <div class="treatment-overlay" id="treatmentOverlay"></div>

                <div class="results-panel" id="resultsPanel">
                    <div class="panel-title">📊 Live Results</div>
                    <div class="result-item">
                        <span class="result-label">Day:</span>
                        <span class="result-value" id="dayCounter">0</span>
                    </div>
                    <div class="result-item">
                        <span class="result-label">Growth:</span>
                        <span class="result-value" id="growthRate">0mm</span>
                    </div>
                    <div class="result-item">
                        <span class="result-label">Success:</span>
                        <span class="result-value" id="successRate">0%</span>
                    </div>
                    <div class="result-item">
                        <span class="result-label">Efficacy:</span>
                        <span class="result-value" id="efficacyRate">0%</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressFill"></div>
                    </div>
                </div>

                <div class="simulation-controls">
                    <button class="sim-button secondary" onclick="resetSimulation()">🔄 Reset</button>
                    <button class="sim-button primary" onclick="startSimulation()" id="startBtn">🚀 Start Simulation</button>
                </div>
            </div>

            <!-- Formula Lab Panel -->
            <div class="formula-lab">
                <div class="panel-title">⚗️ Formula Laboratory</div>

                <!-- Active Ingredients -->
                <div class="formula-section">
                    <div class="section-header">
                        <span>🧪</span>
                        <span>Active Compounds</span>
                    </div>
                    <div class="ingredient-mixer">
                        <div class="ingredient-row">
                            <span class="ingredient-name">Perfluorodecalin</span>
                            <input type="range" class="ingredient-slider" min="0" max="50" value="25" data-ingredient="perfluorodecalin">
                            <span class="ingredient-value">2.5%</span>
                        </div>
                        <div class="ingredient-row">
                            <span class="ingredient-name">Vitamin D3</span>
                            <input type="range" class="ingredient-slider" min="0" max="30" value="15" data-ingredient="vitamin-d3">
                            <span class="ingredient-value">1.5%</span>
                        </div>
                        <div class="ingredient-row">
                            <span class="ingredient-name">DMSO</span>
                            <input type="range" class="ingredient-slider" min="0" max="40" value="30" data-ingredient="dmso">
                            <span class="ingredient-value">3.0%</span>
                        </div>
                        <div class="ingredient-row">
                            <span class="ingredient-name">Calcium Chloride</span>
                            <input type="range" class="ingredient-slider" min="0" max="25" value="20" data-ingredient="calcium">
                            <span class="ingredient-value">2.0%</span>
                        </div>
                        <div class="ingredient-row">
                            <span class="ingredient-name">Essential Oils</span>
                            <input type="range" class="ingredient-slider" min="0" max="15" value="10" data-ingredient="oils">
                            <span class="ingredient-value">1.0%</span>
                        </div>
                        <div class="ingredient-row">
                            <span class="ingredient-name">Coral Extract</span>
                            <input type="range" class="ingredient-slider" min="0" max="50" value="35" data-ingredient="coral">
                            <span class="ingredient-value">3.5%</span>
                        </div>
                    </div>
                </div>

                <!-- Environment Controls -->
                <div class="formula-section">
                    <div class="section-header">
                        <span>🌡️</span>
                        <span>Environment</span>
                    </div>
                    <div class="environment-controls">
                        <div class="control-group">
                            <div class="control-label">Temperature</div>
                            <div class="control-options">
                                <div class="control-option selected" data-param="temp" data-value="4">4°C</div>
                                <div class="control-option" data-param="temp" data-value="0">0°C</div>
                                <div class="control-option" data-param="temp" data-value="-5">-5°C</div>
                            </div>
                        </div>
                        <div class="control-group">
                            <div class="control-label">Humidity</div>
                            <div class="control-options">
                                <div class="control-option selected" data-param="humidity" data-value="65">65%</div>
                                <div class="control-option" data-param="humidity" data-value="80">80%</div>
                                <div class="control-option" data-param="humidity" data-value="45">45%</div>
                            </div>
                        </div>
                        <div class="control-group">
                            <div class="control-label">Pressure</div>
                            <div class="control-options">
                                <div class="control-option selected" data-param="pressure" data-value="1">1 ATM</div>
                                <div class="control-option" data-param="pressure" data-value="1.2">1.2 ATM</div>
                                <div class="control-option" data-param="pressure" data-value="0.8">0.8 ATM</div>
                            </div>
                        </div>
                        <div class="control-group">
                            <div class="control-label">Duration</div>
                            <div class="control-options">
                                <div class="control-option" data-param="duration" data-value="2">2 Hours</div>
                                <div class="control-option selected" data-param="duration" data-value="3">3 Hours</div>
                                <div class="control-option" data-param="duration" data-value="4">4 Hours</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Audio Therapy -->
                <div class="audio-therapy">
                    <div class="section-header">
                        <span>🎵</span>
                        <span>Frequency Therapy</span>
                    </div>
                    <div class="frequency-display">
                        <div class="frequency-value" id="frequencyValue">227</div>
                        <div class="frequency-label">Hz - Cellular Resonance</div>
                    </div>
                    <div class="frequency-controls">
                        <div class="freq-btn" data-freq="174">174 Hz</div>
                        <div class="freq-btn active" data-freq="227">227 Hz</div>
                        <div class="freq-btn" data-freq="528">528 Hz</div>
                        <div class="freq-btn" data-freq="741">741 Hz</div>
                    </div>
                    <button class="play-button" onclick="toggleAudio()" id="audioBtn">
                        🎵 Play Frequency
                    </button>
                </div>
            </div>
        </div>

        <!-- Conclusion Modal -->
        <div class="conclusion-modal" id="conclusionModal">
            <div class="conclusion-content">
                <div class="conclusion-title">🎉 Simulation Complete</div>
                <div id="conclusionText"></div>
                <div class="conclusion-stats" id="conclusionStats"></div>
                <button class="sim-button primary" onclick="closeConclusion()">Continue Research</button>
            </div>
        </div>
    </div>

    <script>
        let selectedPatient = null;
        let selectedBodyPart = null;
        let currentFormula = {};
        let environmentParams = {
            temp: 4,
            humidity: 65,
            pressure: 1,
            duration: 3
        };
        let currentFrequency = 227;
        let audioContext = null;
        let oscillator = null;
        let isPlaying = false;
        let simulationRunning = false;
        let simulationData = {};

        // Patient data with realistic healing factors
        const patientProfiles = {
            john: { age: 34, health: 0.9, healing: 0.85, name: "John" },
            maria: { age: 28, health: 0.8, healing: 0.8, name: "Maria" },
            robert: { age: 67, health: 0.6, healing: 0.5, name: "Robert" },
            sarah: { age: 12, health: 0.95, healing: 0.95, name: "Sarah" }
        };

        // Ingredient effectiveness data
        const ingredientData = {
            'perfluorodecalin': { oxygenation: 0.8, penetration: 0.7, toxicity: 0.1 },
            'vitamin-d3': { growth: 0.6, differentiation: 0.8, toxicity: 0.05 },
            'dmso': { penetration: 0.9, inflammation: 0.7, toxicity: 0.2 },
            'calcium': { mineralization: 0.8, signaling: 0.6, toxicity: 0.1 },
            'oils': { circulation: 0.5, comfort: 0.8, toxicity: 0.05 },
            'coral': { growth: 0.7, structure: 0.8, toxicity: 0.1 }
        };

        // Initialize the application
        function init() {
            setupEventListeners();
            initializeAudioContext();
        }

        function setupEventListeners() {
            // Patient selection
            document.querySelectorAll('[data-patient]').forEach(card => {
                card.addEventListener('click', () => selectPatient(card.dataset.patient, card));
            });

            // Body part selection
            document.querySelectorAll('[data-bodypart]').forEach(part => {
                part.addEventListener('click', () => selectBodyPart(part.dataset.bodypart, part));
            });

            // Ingredient sliders
            document.querySelectorAll('.ingredient-slider').forEach(slider => {
                slider.addEventListener('input', (e) => updateIngredient(e.target.dataset.ingredient, e.target.value, e.target));
            });

            // Environment controls
            document.querySelectorAll('[data-param]').forEach(option => {
                option.addEventListener('click', () => selectEnvironmentParam(option.dataset.param, option.dataset.value, option));
            });

            // Frequency controls
            document.querySelectorAll('.freq-btn').forEach(btn => {
                btn.addEventListener('click', () => selectFrequency(btn.dataset.freq, btn));
            });
        }

        function selectPatient(patientId, element) {
            selectedPatient = patientId;
            document.querySelectorAll('[data-patient]').forEach(card => card.classList.remove('selected'));
            element.classList.add('selected');
            updatePatientModel();
        }

        function selectBodyPart(bodyPart, element) {
            selectedBodyPart = bodyPart;
            document.querySelectorAll('[data-bodypart]').forEach(part => part.classList.remove('selected'));
            element.classList.add('selected');
            updatePatientModel();
        }

        function updateIngredient(ingredient, value, slider) {
            currentFormula[ingredient] = parseFloat(value);
            const valueDisplay = slider.parentNode.querySelector('.ingredient-value');
            valueDisplay.textContent = (value / 10).toFixed(1) + '%';
        }

        function selectEnvironmentParam(param, value, element) {
            environmentParams[param] = parseFloat(value);
            document.querySelectorAll(`[data-param="${param}"]`).forEach(option => option.classList.remove('selected'));
            element.classList.add('selected');
        }

        function selectFrequency(freq, element) {
            currentFrequency = parseInt(freq);
            document.querySelectorAll('.freq-btn').forEach(btn => btn.classList.remove('active'));
            element.classList.add('active');
            document.getElementById('frequencyValue').textContent = freq;
            
            // Update frequency description
            const descriptions = {
                174: "Hz - Pain Relief",
                227: "Hz - Cellular Resonance", 
                528: "Hz - DNA Repair",
                741: "Hz - Detoxification"
            };
            document.querySelector('.frequency-label').textContent = descriptions[freq];
        }

        function updatePatientModel() {
            if (!selectedPatient || !selectedBodyPart) return;

            const modelContainer = document.getElementById('patientModel');
            const patient = patientProfiles[selectedPatient];
            
            let modelHTML = '';
            
            switch(selectedBodyPart) {
                case 'finger':
                    modelHTML = `
                        <svg width="300" height="400" viewBox="0 0 300 400" xmlns="http://www.w3.org/2000/svg">
                            <defs>
                                <linearGradient id="skinGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                    <stop offset="0%" style="stop-color:#ffdbac;stop-opacity:1" />
                                    <stop offset="100%" style="stop-color:#d4a574;stop-opacity:1" />
                                </linearGradient>
                                <filter id="glow">
                                    <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
                                    <feMerge> 
                                        <feMergeNode in="coloredBlur"/>
                                        <feMergeNode in="SourceGraphic"/>
                                    </feMerge>
                                </filter>
                            </defs>
                            
                            <!-- Hand -->
                            <path d="M100 250 Q80 220 80 180 Q80 140 100 120 Q120 100 150 100 Q180 100 200 120 Q220 140 220 180 Q220 220 200 250 Z" 
                                  fill="url(#skinGradient)" stroke="#d4a574" stroke-width="2"/>
                            
                            <!-- Target Finger -->
                            <rect id="targetArea" x="120" y="50" width="25" height="70" rx="12" 
                                  fill="#ff6b6b" stroke="#d4a574" stroke-width="2" opacity="0.6" filter="url(#glow)"/>
                            
                            <!-- Other fingers -->
                            <rect x="155" y="40" width="25" height="80" rx="12" fill="url(#skinGradient)" stroke="#d4a574" stroke-width="2"/>
                            <rect x="190" y="50" width="25" height="75" rx="12" fill="url(#skinGradient)" stroke="#d4a574" stroke-width="2"/>
                            
                            <!-- Patient info -->
                            <text x="150" y="350" text-anchor="middle" fill="#00d4ff" font-size="16">${patient.name}, Age ${patient.age}</text>
                            <text x="150" y="370" text-anchor="middle" fill="#a0a0a0" font-size="12">Health: ${Math.round(patient.health * 100)}% | Healing: ${Math.round(patient.healing * 100)}%</text>
                        </svg>
                    `;
                    break;
                    
                default:
                    modelHTML = `
                        <div style="text-align: center; color: #00d4ff; font-size: 18px;">
                            <div style="font-size: 64px; margin-bottom: 20px;">🫴</div>
                            <div>${patient.name} - ${selectedBodyPart.toUpperCase()}</div>
                            <div style="font-size: 14px; color: #a0a0a0; margin-top: 10px;">
                                Age: ${patient.age} | Health: ${Math.round(patient.health * 100)}%
                            </div>
                        </div>
                    `;
            }
            
            modelContainer.innerHTML = modelHTML;
        }

        function initializeAudioContext() {
            try {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
            } catch (e) {
                console.log('Audio not supported');
            }
        }

        function toggleAudio() {
            if (!audioContext) return;

            const button = document.getElementById('audioBtn');
            
            if (isPlaying) {
                stopAudio();
                button.textContent = '🎵 Play Frequency';
                button.classList.remove('playing');
            } else {
                playAudio();
                button.textContent = '⏸️ Stop Frequency';
                button.classList.add('playing');
            }
        }

        function playAudio() {
            if (!audioContext) return;

            oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.frequency.setValueAtTime(currentFrequency, audioContext.currentTime);
            oscillator.type = 'sine';
            
            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.start();
            isPlaying = true;
        }

        function stopAudio() {
            if (oscillator) {
                oscillator.stop();
                oscillator = null;
            }
            isPlaying = false;
        }

        function startSimulation() {
            if (!selectedPatient || !selectedBodyPart) {
                alert('Please select a patient and body part first!');
                return;
            }

            if (simulationRunning) return;

            simulationRunning = true;
            document.getElementById('startBtn').textContent = '⚡ Running...';
            document.getElementById('resultsPanel').classList.add('active');

            // Calculate simulation parameters
            calculateSimulationEffectiveness();
            
            // Run simulation
            runSimulation();
        }

        function calculateSimulationEffectiveness() {
            const patient = patientProfiles[selectedPatient];
            
            // Base effectiveness from patient factors
            let baseEffectiveness = (patient.health + patient.healing) / 2;
            
            // Age factor (younger = better)
            const ageFactor = Math.max(0.3, 1 - (patient.age - 12) / 100);
            
            // Formula effectiveness
            let formulaEffectiveness = 0;
            let totalToxicity = 0;
            
            for (const [ingredient, concentration] of Object.entries(currentFormula)) {
                const data = ingredientData[ingredient];
                if (data) {
                    const effectiveConc = Math.min(concentration / 10, 5); // Max 5% effective
                    formulaEffectiveness += (data.growth + data.penetration + data.oxygenation || 0) * effectiveConc / 100;
                    totalToxicity += data.toxicity * effectiveConc / 10;
                }
            }
            
            // Environment factors
            const tempFactor = environmentParams.temp === 4 ? 1.0 : (environmentParams.temp === 0 ? 0.9 : 0.8);
            const humidityFactor = environmentParams.humidity === 65 ? 1.0 : 0.9;
            const pressureFactor = environmentParams.pressure === 1 ? 1.0 : 0.95;
            const durationFactor = environmentParams.duration / 3; // 3 hours is optimal
            
            // Frequency factor
            const frequencyFactor = {
                174: 0.7,  // Pain relief
                227: 1.0,  // Optimal cellular
                528: 0.9,  // DNA repair
                741: 0.8   // Detox
            }[currentFrequency] || 0.5;
            
            // Calculate final effectiveness
            simulationData.effectiveness = Math.min(0.95, 
                baseEffectiveness * ageFactor * tempFactor * humidityFactor * 
                pressureFactor * durationFactor * frequencyFactor * 
                (1 + formulaEffectiveness) * (1 - totalToxicity)
            );
            
            simulationData.growthRate = simulationData.effectiveness * 0.3; // mm per day
            simulationData.maxDays = Math.round(30 / simulationData.effectiveness);
            simulationData.toxicity = totalToxicity;
        }

        function runSimulation() {
            let day = 0;
            const maxDays = simulationData.maxDays;
            
            const interval = setInterval(() => {
                day++;
                
                // Update displays
                document.getElementById('dayCounter').textContent = day;
                document.getElementById('growthRate').textContent = (day * simulationData.growthRate).toFixed(1) + 'mm';
                document.getElementById('successRate').textContent = Math.round(simulationData.effectiveness * 100) + '%';
                document.getElementById('efficacyRate').textContent = Math.round((day / maxDays) * 100) + '%';
                document.getElementById('progressFill').style.width = (day / maxDays) * 100 + '%';
                
                // Add visual effects
                addHealingParticles();
                updateTargetArea(day / maxDays);
                
                if (day >= maxDays) {
                    clearInterval(interval);
                    completeSimulation();
                }
            }, 200); // Fast simulation
        }

        function addHealingParticles() {
            const overlay = document.getElementById('treatmentOverlay');
            
            for (let i = 0; i < 3; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + '%';
                particle.style.animationDelay = Math.random() * 2 + 's';
                
                overlay.appendChild(particle);
                
                setTimeout(() => {
                    if (particle.parentNode) {
                        particle.parentNode.removeChild(particle);
                    }
                }, 3000);
            }
        }

        function updateTargetArea(progress) {
            const targetArea = document.getElementById('targetArea');
            if (targetArea) {
                const opacity = 0.6 + (progress * 0.4);
                const hue = 0 + (progress * 120); // Red to green
                targetArea.style.opacity = opacity;
                targetArea.style.fill = `hsl(${hue}, 70%, 60%)`;
            }
        }

        function completeSimulation() {
            simulationRunning = false;
            document.getElementById('startBtn').textContent = '🚀 Start Simulation';
            
            // Show conclusion
            showConclusion();
        }

        function showConclusion() {
            const modal = document.getElementById('conclusionModal');
            const effectiveness = simulationData.effectiveness;
            const growthTotal = simulationData.maxDays * simulationData.growthRate;
            
            let conclusion = '';
            let recommendation = '';
            
            if (effectiveness > 0.8) {
                conclusion = 'Excellent Results! This formula shows high potential for clinical success.';
                recommendation = 'Recommended for advanced testing phase.';
            } else if (effectiveness > 0.6) {
                conclusion = 'Good Results. Formula shows promise with some optimization needed.';
                recommendation = 'Consider adjusting ingredient concentrations.';
            } else if (effectiveness > 0.4) {
                conclusion = 'Moderate Results. Significant improvements required.';
                recommendation = 'Review environmental parameters and formula composition.';
            } else {
                conclusion = 'Poor Results. Formula requires major revision.';
                recommendation = 'Consider alternative ingredients or delivery methods.';
            }
            
            document.getElementById('conclusionText').innerHTML = `
                <p style="color: #a0a0a0; margin-bottom: 20px;">${conclusion}</p>
                <p style="color: #00d4ff;">${recommendation}</p>
            `;
            
            document.getElementById('conclusionStats').innerHTML = `
                <div class="stat-card">
                    <div class="stat-number">${Math.round(effectiveness * 100)}%</div>
                    <div class="stat-description">Overall Success Rate</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${growthTotal.toFixed(1)}mm</div>
                    <div class="stat-description">Total Regeneration</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${simulationData.maxDays}</div>
                    <div class="stat-description">Days to Complete</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${Math.round(simulationData.toxicity * 100)}%</div>
                    <div class="stat-description">Toxicity Level</div>
                </div>
            `;
            
            modal.style.display = 'flex';
        }

        function closeConclusion() {
            document.getElementById('conclusionModal').style.display = 'none';
        }

        function resetSimulation() {
            simulationRunning = false;
            document.getElementById('startBtn').textContent = '🚀 Start Simulation';
            document.getElementById('resultsPanel').classList.remove('active');
            document.getElementById('treatmentOverlay').innerHTML = '';
            
            // Reset displays
            document.getElementById('dayCounter').textContent = '0';
            document.getElementById('growthRate').textContent = '0mm';
            document.getElementById('successRate').textContent = '0%';
            document.getElementById('efficacyRate').textContent = '0%';
            document.getElementById('progressFill').style.width = '0%';
            
            // Reset target area
            const targetArea = document.getElementById('targetArea');
            if (targetArea) {
                targetArea.style.opacity = '0.6';
                targetArea.style.fill = '#ff6b6b';
            }
        }

        // Initialize the application
        init();
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'983ae93d37d173ec',t:'MTc1ODYzOTYyMS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
