name: Deploy DHA Digital Services Platform

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      platform:
        description: 'Choose deployment platform'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - github-pages
          - netlify
          - railway
          - render
          - vercel
          

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

job:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dha_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci

      - name: Run TypeScript type checking
        run: |
          npx tsc --noEmit
          cd client && npx tsc --noEmit

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test || echo "Tests not configured yet"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dha_test
          NODE_ENV: test

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Verify build artifacts
        run: |
          echo "Checking build artifacts..."
          ls -la dist/
          ls -la dist/server/
          ls -la client/dist/
          if [ ! -f "dist/server/index.js" ]; then
            echo "‚ùå Server build failed - dist/server/index.js not found"
            exit 1
          fi
          if [ ! -d "client/dist" ]; then
            echo "‚ùå Client build failed - client/dist not found"
            exit 1
          fi
          echo "‚úÖ All build artifacts verified"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            client/dist/
            netlify/
            package.json
            package-lock.json
            start.sh
            railway.toml
            netlify.toml
          retention-days: 30

  deploy-netlify:
    name: Deploy to Netlify
    runs-on: ubuntu-latest
    needs: build
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'netlify' || github.event.inputs.platform == 'all' || github.event.inputs.platform == '')))
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './client/dist'
          functions-dir: './netlify/functions'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "üöÄ DHA Digital Services - Deploy ${{ github.sha }}"
          enable-pull-request-comment: false
          enable-commit-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 10

  deploy-railway:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: build
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'railway' || github.event.inputs.platform == 'all' || github.event.inputs.platform == '')))
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway link --service ${{ secrets.RAILWAY_SERVICE_ID }} || echo "Service already linked"
          railway up --detach

      - name: Verify Railway deployment
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          sleep 90
          RAILWAY_URL=$(railway status --json | jq -r '.deployments[0].url // "unknown"')
          if [ "$RAILWAY_URL" != "unknown" ] && [ "$RAILWAY_URL" != "null" ]; then
            HEALTH_URL="$RAILWAY_URL/api/health"
            echo "Testing health endpoint: $HEALTH_URL"
            for i in {1..10}; do
              if curl -f "$HEALTH_URL"; then
                echo "‚úÖ Railway deployment healthy"
                exit 0
              fi
              echo "Attempt $i failed, retrying in 30s..."
              sleep 30
            done
            echo "‚ùå Railway deployment health check failed"
            exit 1
          else
            echo "‚ö†Ô∏è Could not determine Railway URL"
          fi

  deploy-render:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: build
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'render' || github.event.inputs.platform == 'all' || github.event.inputs.platform == '')))
    
    steps:
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          echo "Deploying to Render..."
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys"

  deploy-github-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'github-pages' || github.event.inputs.platform == 'all' || github.event.inputs.platform == '')))
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install and build client
        run: |
          cd client
          npm ci
          npm run build
          cp public/404.html dist/404.html
        env:
          NODE_ENV: production

      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./client/dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: build
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && (github.event_name == 'workflow_dispatch' && github.event.inputs.platform == 'vercel')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run npm audit
        run: |
          npm audit --audit-level=high || echo "Audit completed with warnings"
          cd client && npm audit --audit-level=high || echo "Client audit completed with warnings"

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-netlify, deploy-railway, deploy-render, deploy-vercel]
    if: always()
    
    steps:
      - name: Send notification
        run: |
          echo "üáøüá¶ DHA Digital Services Platform Deployment Summary"
          echo "=================================================="
          echo "Netlify: ${{ needs.deploy-netlify.result || 'skipped' }}"
          echo "Railway: ${{ needs.deploy-railway.result || 'skipped' }}"
          echo "Render: ${{ needs.deploy-render.result || 'skipped' }}"
          echo "Vercel: ${{ needs.deploy-vercel.result || 'skipped' }}"
          
          SUCCESS_COUNT=0
          if [ "${{ needs.deploy-netlify.result }}" == "success" ]; then SUCCESS_COUNT=$((SUCCESS_COUNT + 1)); fi
          if [ "${{ needs.deploy-railway.result }}" == "success" ]; then SUCCESS_COUNT=$((SUCCESS_COUNT + 1)); fi
          if [ "${{ needs.deploy-render.result }}" == "success" ]; then SUCCESS_COUNT=$((SUCCESS_COUNT + 1)); fi
          if [ "${{ needs.deploy-vercel.result }}" == "success" ]; then SUCCESS_COUNT=$((SUCCESS_COUNT + 1)); fi
          
          echo "‚úÖ Successful deployments: $SUCCESS_COUNT"
          echo "üöÄ Government platform deployment completed"
          - name: Metrics embed
  uses: lowlighter/metrics@v3.34
  - name: GitHub Pages
  uses: crazy-max/ghaction-github-pages@v4.2.0
              - name: SecureStack All-In-One GitHub Action
  # You may pin to the exact commit or the version.
  # uses: SecureStackCo/actions-all-in-one@96dc79a3c4081a8333040c6bf84b0c528ccb1eb9
  uses: SecureStackCo/actions-all-in-one@v0.1.2
  with:
    # SecureStack API key - generate an API key at https://app.securestack.com
    securestack_api_key: 
    # SecureStack Application ID - can be retrieved by accessing required application at https://app.securestack.com
    securestack_app_id: 
    # Severities lower than this value will be reported in the workflow console but will not cause an error for the action; value should be one of: critical | high | medium | low
    severity: 
          
    
