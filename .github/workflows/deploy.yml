name: Deploy to Netlify

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        DHA_NPR_API_KEY: ${{ secrets.DHA_NPR_API_KEY }}
        ICAO_PKD_API_KEY: ${{ secrets.ICAO_PKD_API_KEY }}
        SAPS_CRC_API_KEY: ${{ secrets.SAPS_CRC_API_KEY }}
        DHA_ABIS_API_KEY: ${{ secrets.DHA_ABIS_API_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Prepare Netlify deployment artifacts
      run: |
        # Ensure all build artifacts exist
        echo "üì¶ Preparing deployment artifacts..."
        
        # Create functions directory
        mkdir -p .netlify/functions-dist
        
        # Verify server build artifacts
        if [ ! -f "dist/server/index.js" ]; then
          echo "‚ùå Server build artifact missing: dist/server/index.js"
          echo "Available files in dist/:"
          find dist/ -type f -name "*.js" | head -10
          exit 1
        fi
        
        # Bundle server build with Netlify function (slim bundle - server only)
        echo "üì¶ Bundling server with Netlify function..."
        
        # Copy only server build (not entire dist to avoid size issues)
        cp -r dist/server .netlify/functions-dist/
        
        # Copy serverless-http dependency for function
        mkdir -p .netlify/functions-dist/node_modules
        cp -r node_modules/serverless-http .netlify/functions-dist/node_modules/
        
        # Copy ESM Netlify function
        cp netlify/functions/api.mjs .netlify/functions-dist/api.mjs
        
        # Create package.json for ESM support
        echo '{"type":"module"}' > .netlify/functions-dist/package.json
        
        # Verify the bundle
        if [ ! -f ".netlify/functions-dist/server/index.js" ]; then
          echo "‚ùå Server bundle verification failed"
          exit 1
        fi
        
        if [ ! -f ".netlify/functions-dist/api.mjs" ]; then
          echo "‚ùå Function bundle verification failed"
          exit 1
        fi
        
        echo "‚úÖ Server build bundled: .netlify/functions-dist/server/index.js"
        echo "‚úÖ Netlify function prepared: .netlify/functions-dist/api.mjs (ESM)"
        echo "‚úÖ Dependencies bundled: serverless-http"
        echo "üìä Bundle size:"
        du -sh .netlify/functions-dist/
    
    - name: Run tests
      run: npm test || echo "No tests configured"
    
    - name: Security check - Verify required secrets
      run: |
        if [ -z "${{ secrets.JWT_SECRET }}" ]; then
          echo "‚ùå JWT_SECRET is not set"
          exit 1
        fi
        if [ -z "${{ secrets.NETLIFY_AUTH_TOKEN }}" ]; then
          echo "‚ùå NETLIFY_AUTH_TOKEN is not set"
          exit 1
        fi
        if [ -z "${{ secrets.NETLIFY_SITE_ID }}" ]; then
          echo "‚ùå NETLIFY_SITE_ID is not set"
          exit 1
        fi
        echo "‚úÖ All required secrets are configured"
    
    - name: Build verification
      run: |
        if [ ! -d "./dist/public" ]; then
          echo "‚ùå Build failed - dist/public directory not found"
          exit 1
        fi
        if [ ! -f "./dist/public/index.html" ]; then
          echo "‚ùå Build failed - index.html not found"
          exit 1
        fi
        echo "‚úÖ Build verification passed"
    
    - name: Deploy to Netlify
      id: netlify-deploy
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './dist/public'
        functions-dir: './.netlify/functions-dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "üöÄ Deploy from GitHub Actions - ${{ github.sha }}"
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: true
        alias: deploy-preview-${{ github.run_number }}
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      timeout-minutes: 5
      
    - name: Post-deployment health check
      run: |
        echo "üè• Performing post-deployment health check..."
        
        # Get the actual deployment URL from the Netlify deploy action
        DEPLOY_URL="${{ steps.netlify-deploy.outputs.deploy-url }}"
        
        if [ -z "$DEPLOY_URL" ]; then
          echo "‚ùå Deploy URL not available from Netlify action"
          DEPLOY_URL="https://dha-digital-services.netlify.app"
          echo "‚ö†Ô∏è Falling back to default URL: $DEPLOY_URL"
        else
          echo "‚úÖ Using deployment URL: $DEPLOY_URL"
        fi
        
        # Wait for deployment to be available
        echo "‚è≥ Waiting for deployment to become available..."
        sleep 30
        
        # Test static assets first
        echo "üåê Testing static assets..."
        STATIC_RESPONSE=$(curl -s -w "%{http_code}" --max-time 30 "$DEPLOY_URL" -o /dev/null)
        if [ "$STATIC_RESPONSE" = "200" ]; then
          echo "‚úÖ Static assets check passed (HTTP $STATIC_RESPONSE)"
        else
          echo "‚ùå Static assets check failed (HTTP $STATIC_RESPONSE)"
          exit 1
        fi
        
        # Test API health endpoint via redirect (/api/health -> /.netlify/functions/api)
        echo "üîå Testing API health endpoint..."
        API_RESPONSE=$(curl -s -w "%{http_code}" --max-time 30 "$DEPLOY_URL/api/health" -o /dev/null)
        if [ "$API_RESPONSE" = "200" ]; then
          echo "‚úÖ API health check passed (HTTP $API_RESPONSE)"
        else
          echo "‚ö†Ô∏è API health check failed (HTTP $API_RESPONSE) - function may need warmup"
          
          # Try direct function access as fallback
          echo "üîÑ Trying direct function access..."
          DIRECT_RESPONSE=$(curl -s -w "%{http_code}" --max-time 30 "$DEPLOY_URL/.netlify/functions/api/health" -o /dev/null)
          if [ "$DIRECT_RESPONSE" = "200" ]; then
            echo "‚úÖ Direct function access passed (HTTP $DIRECT_RESPONSE)"
          else
            echo "‚ùå Both API routes failed - deployment issue detected"
            echo "Debug info:"
            curl -s --max-time 10 "$DEPLOY_URL/api/health" || echo "API route failed"
            curl -s --max-time 10 "$DEPLOY_URL/.netlify/functions/api/health" || echo "Direct function failed"
            exit 1
          fi
        fi
        
        echo "üìù Deploy commit: ${{ github.sha }}"
        echo "üîó Site URL: $DEPLOY_URL"
        echo "‚úÖ Deployment verification completed successfully"