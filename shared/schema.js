"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.systemHealthSnapshots = exports.selfHealingActions = exports.dhaDocumentVerifications = exports.dhaDocuments = exports.dhaApplicants = exports.documentTypeSchemas = exports.certificateOfSouthAfricanCitizenshipSchema = exports.certificateOfExemptionSchema = exports.permanentResidencePermitSchema = exports.relativesVisaSchema = exports.exchangeVisaSchema = exports.retiredPersonVisaSchema = exports.medicalTreatmentVisaSchema = exports.visitorVisaSchema = exports.studyVisaPermitSchema = exports.businessVisaSchema = exports.intraCompanyTransferWorkVisaSchema = exports.criticalSkillsWorkVisaSchema = exports.generalWorkVisaSchema = exports.divorceCertificateSchema = exports.marriageCertificateSchema = exports.deathCertificateSchema = exports.birthCertificateSchema = exports.refugeeTravelDocumentSchema = exports.emergencyTravelCertificateSchema = exports.southAfricanPassportSchema = exports.temporaryIdCertificateSchema = exports.identityDocumentBookSchema = exports.smartIdCardSchema = exports.documentGenerationRequestSchema = exports.selfUpgradeHistory = exports.quantumSimulations = exports.ultraQueenAIIntegrations = exports.ultraQueenAIMessages = exports.ultraQueenAIConversations = exports.ultraQueenAISystems = exports.aiCommandInterfaces = exports.aiBotSessions = exports.userBehaviorProfiles = exports.complianceEvents = exports.auditLogs = exports.systemMetrics = exports.fraudAlerts = exports.securityEvents = exports.documents = exports.messages = exports.conversations = exports.users = exports.ComplianceEventType = exports.AuditAction = void 0;
exports.DHA_DOCUMENT_TYPES = exports.insertDhaDocumentVerificationSchema = exports.insertDhaDocumentSchema = exports.insertDhaApplicantSchema = exports.biometricProfiles = exports.securityMetrics = exports.governmentComplianceAudits = exports.maintenanceTasks = exports.autonomousOperations = exports.uptimeIncidents = exports.circuitBreakerStates = exports.alertRules = exports.performanceBaselines = exports.failoverEvents = exports.healthCheckResults = exports.errorCorrections = exports.securityIncidents = void 0;
const drizzle_orm_1 = require("drizzle-orm");
const pg_core_1 = require("drizzle-orm/pg-core");
const zod_1 = require("zod");
exports.AuditAction = {
    CREATE: 'CREATE',
    READ: 'READ',
    UPDATE: 'UPDATE',
    DELETE: 'DELETE',
    LOGIN: 'LOGIN',
    LOGOUT: 'LOGOUT',
    GENERATE_DOCUMENT: 'GENERATE_DOCUMENT',
    VALIDATE_BIOMETRIC: 'VALIDATE_BIOMETRIC',
    LOGIN_ATTEMPT: 'LOGIN_ATTEMPT',
    LOGIN_SUCCESS: 'LOGIN_SUCCESS',
    LOGIN_FAILED: 'LOGIN_FAILED',
    PASSWORD_CHANGED: 'PASSWORD_CHANGED',
    DOCUMENT_UPLOADED: 'DOCUMENT_UPLOADED',
    DOCUMENT_DOWNLOADED: 'DOCUMENT_DOWNLOADED',
    DOCUMENT_VIEWED: 'DOCUMENT_VIEWED',
    DOCUMENT_DELETED: 'DOCUMENT_DELETED',
    DOCUMENT_MODIFIED: 'DOCUMENT_MODIFIED',
    DOCUMENT_VERIFIED: 'DOCUMENT_VERIFIED',
    API_CALL: 'API_CALL',
    DHA_API_CALL: 'DHA_API_CALL',
    SAPS_API_CALL: 'SAPS_API_CALL',
    ICAO_API_CALL: 'ICAO_API_CALL',
    USER_CREATED: 'USER_CREATED',
    USER_UPDATED: 'USER_UPDATED'
};
exports.ComplianceEventType = {
    POPIA_CONSENT: 'POPIA_CONSENT',
    DATA_ACCESS: 'DATA_ACCESS',
    DATA_EXPORT: 'DATA_EXPORT',
    BIOMETRIC_CAPTURE: 'BIOMETRIC_CAPTURE',
    DOCUMENT_GENERATION: 'DOCUMENT_GENERATION',
    DATA_ACCESSED: 'DATA_ACCESSED',
    DATA_MODIFIED: 'DATA_MODIFIED',
    DATA_DELETED: 'DATA_DELETED'
};
exports.users = (0, pg_core_1.pgTable)("users", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    username: (0, pg_core_1.text)("username").notNull().unique(),
    email: (0, pg_core_1.text)("email").notNull().unique(),
    password: (0, pg_core_1.text)("password"),
    hashedPassword: (0, pg_core_1.text)("hashed_password"),
    role: (0, pg_core_1.text)("role").notNull().default("user"),
    isActive: (0, pg_core_1.boolean)("is_active").notNull().default(true),
    mustChangePassword: (0, pg_core_1.boolean)("must_change_password").default(false),
    failedAttempts: (0, pg_core_1.integer)("failed_attempts").notNull().default(0),
    lockedUntil: (0, pg_core_1.text)("locked_until"),
    lastFailedAttempt: (0, pg_core_1.text)("last_failed_attempt"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.conversations = (0, pg_core_1.pgTable)("conversations", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)("user_id").notNull().references(() => exports.users.id),
    title: (0, pg_core_1.text)("title").notNull(),
    lastMessageAt: (0, pg_core_1.timestamp)("last_message_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.messages = (0, pg_core_1.pgTable)("messages", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    conversationId: (0, pg_core_1.varchar)("conversation_id").notNull().references(() => exports.conversations.id),
    role: (0, pg_core_1.text)("role").notNull(),
    content: (0, pg_core_1.text)("content").notNull(),
    metadata: (0, pg_core_1.jsonb)("metadata"),
    attachments: (0, pg_core_1.jsonb)("attachments"),
    aiContext: (0, pg_core_1.jsonb)("ai_context"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.documents = (0, pg_core_1.pgTable)("documents", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)("user_id").notNull().references(() => exports.users.id),
    filename: (0, pg_core_1.text)("filename").notNull(),
    originalName: (0, pg_core_1.text)("original_name").notNull(),
    mimeType: (0, pg_core_1.text)("mime_type").notNull(),
    size: (0, pg_core_1.integer)("size").notNull(),
    storagePath: (0, pg_core_1.text)("storage_path").notNull(),
    encryptionKey: (0, pg_core_1.text)("encryption_key"),
    isEncrypted: (0, pg_core_1.boolean)("is_encrypted").notNull().default(false),
    processingStatus: (0, pg_core_1.text)("processing_status").notNull().default("pending"),
    ocrText: (0, pg_core_1.text)("ocr_text"),
    ocrConfidence: (0, pg_core_1.integer)("ocr_confidence"),
    isVerified: (0, pg_core_1.boolean)("is_verified"),
    verificationScore: (0, pg_core_1.integer)("verification_score"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.securityEvents = (0, pg_core_1.pgTable)("security_events", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)("user_id").references(() => exports.users.id),
    eventType: (0, pg_core_1.text)("event_type").notNull(),
    severity: (0, pg_core_1.text)("severity").notNull().default("medium"),
    details: (0, pg_core_1.jsonb)("details"),
    ipAddress: (0, pg_core_1.text)("ip_address"),
    userAgent: (0, pg_core_1.text)("user_agent"),
    location: (0, pg_core_1.text)("location"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.fraudAlerts = (0, pg_core_1.pgTable)("fraud_alerts", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)("user_id").notNull().references(() => exports.users.id),
    alertType: (0, pg_core_1.text)("alert_type").notNull(),
    riskScore: (0, pg_core_1.integer)("risk_score").notNull(),
    details: (0, pg_core_1.jsonb)("details"),
    isResolved: (0, pg_core_1.boolean)("is_resolved").notNull().default(false),
    resolvedBy: (0, pg_core_1.varchar)("resolved_by").references(() => exports.users.id),
    resolvedAt: (0, pg_core_1.timestamp)("resolved_at"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.systemMetrics = (0, pg_core_1.pgTable)("system_metrics", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    metricType: (0, pg_core_1.text)("metric_type").notNull(),
    value: (0, pg_core_1.integer)("value").notNull(),
    unit: (0, pg_core_1.text)("unit").notNull(),
    timestamp: (0, pg_core_1.timestamp)("timestamp").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.auditLogs = (0, pg_core_1.pgTable)("audit_logs", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)("user_id").references(() => exports.users.id),
    action: (0, pg_core_1.text)("action").notNull(),
    entityType: (0, pg_core_1.text)("entity_type"),
    entityId: (0, pg_core_1.varchar)("entity_id"),
    previousState: (0, pg_core_1.jsonb)("previous_state"),
    newState: (0, pg_core_1.jsonb)("new_state"),
    actionDetails: (0, pg_core_1.jsonb)("action_details"),
    outcome: (0, pg_core_1.text)("outcome"),
    details: (0, pg_core_1.jsonb)("details"),
    ipAddress: (0, pg_core_1.text)("ip_address"),
    userAgent: (0, pg_core_1.text)("user_agent"),
    location: (0, pg_core_1.text)("location"),
    riskScore: (0, pg_core_1.integer)("risk_score"),
    complianceFlags: (0, pg_core_1.jsonb)("compliance_flags"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.complianceEvents = (0, pg_core_1.pgTable)("compliance_events", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)("user_id").references(() => exports.users.id),
    eventType: (0, pg_core_1.text)("event_type").notNull(),
    dataSubjectId: (0, pg_core_1.varchar)("data_subject_id"),
    dataCategory: (0, pg_core_1.text)("data_category"),
    processingPurpose: (0, pg_core_1.text)("processing_purpose"),
    legalBasis: (0, pg_core_1.text)("legal_basis"),
    processingDetails: (0, pg_core_1.jsonb)("processing_details"),
    complianceStatus: (0, pg_core_1.text)("compliance_status"),
    details: (0, pg_core_1.jsonb)("details"),
    complianceFlags: (0, pg_core_1.jsonb)("compliance_flags"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.userBehaviorProfiles = (0, pg_core_1.pgTable)("user_behavior_profiles", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)("user_id").notNull().references(() => exports.users.id).unique(),
    typicalLocations: (0, pg_core_1.jsonb)("typical_locations"),
    typicalDevices: (0, pg_core_1.jsonb)("typical_devices"),
    typicalTimes: (0, pg_core_1.jsonb)("typical_times"),
    loginPatterns: (0, pg_core_1.jsonb)("login_patterns"),
    documentPatterns: (0, pg_core_1.jsonb)("document_patterns"),
    riskFactors: (0, pg_core_1.jsonb)("risk_factors"),
    baselineScore: (0, pg_core_1.integer)("baseline_score"),
    lastAnalyzed: (0, pg_core_1.timestamp)("last_analyzed"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.aiBotSessions = (0, pg_core_1.pgTable)("ai_bot_sessions", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)("user_id").notNull().references(() => exports.users.id),
    aiMode: (0, pg_core_1.text)("ai_mode").notNull(),
    sessionActive: (0, pg_core_1.boolean)("session_active").notNull().default(true),
    unlimitedCapabilities: (0, pg_core_1.boolean)("unlimited_capabilities").notNull().default(false),
    militaryGradeAccess: (0, pg_core_1.boolean)("military_grade_access").notNull().default(false),
    censorshipDisabled: (0, pg_core_1.boolean)("censorship_disabled").notNull().default(false),
    resourceLimits: (0, pg_core_1.jsonb)("resource_limits"),
    currentTask: (0, pg_core_1.text)("current_task"),
    sessionMetadata: (0, pg_core_1.jsonb)("session_metadata"),
    lastActivity: (0, pg_core_1.timestamp)("last_activity").notNull().default((0, drizzle_orm_1.sql) `now()`),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.aiCommandInterfaces = (0, pg_core_1.pgTable)("ai_command_interfaces", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    sessionId: (0, pg_core_1.varchar)("session_id").notNull().references(() => exports.aiBotSessions.id),
    userId: (0, pg_core_1.varchar)("user_id").notNull().references(() => exports.users.id),
    command: (0, pg_core_1.text)("command").notNull(),
    commandType: (0, pg_core_1.text)("command_type").notNull(),
    executionStatus: (0, pg_core_1.text)("execution_status").notNull().default("pending"),
    unlimitedMode: (0, pg_core_1.boolean)("unlimited_mode").notNull().default(false),
    censorshipBypassed: (0, pg_core_1.boolean)("censorship_bypassed").notNull().default(false),
    complexityScore: (0, pg_core_1.integer)("complexity_score"),
    resourcesUsed: (0, pg_core_1.jsonb)("resources_used"),
    executionResults: (0, pg_core_1.jsonb)("execution_results"),
    errorDetails: (0, pg_core_1.jsonb)("error_details"),
    processingTime: (0, pg_core_1.integer)("processing_time"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
    completedAt: (0, pg_core_1.timestamp)("completed_at"),
});
exports.ultraQueenAISystems = (0, pg_core_1.pgTable)("ultra_queen_ai_systems", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    systemName: (0, pg_core_1.text)("system_name").notNull(),
    systemType: (0, pg_core_1.text)("system_type").notNull(),
    provider: (0, pg_core_1.text)("provider").notNull(),
    apiStatus: (0, pg_core_1.text)("api_status").notNull().default("inactive"),
    credentials: (0, pg_core_1.jsonb)("credentials"),
    configuration: (0, pg_core_1.jsonb)("configuration"),
    capabilities: (0, pg_core_1.jsonb)("capabilities"),
    usageMetrics: (0, pg_core_1.jsonb)("usage_metrics"),
    lastHealthCheck: (0, pg_core_1.timestamp)("last_health_check"),
    healthStatus: (0, pg_core_1.text)("health_status").default("unknown"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
    updatedAt: (0, pg_core_1.timestamp)("updated_at").notNull().default((0, drizzle_orm_1.sql) `now()`)
});
exports.ultraQueenAIConversations = (0, pg_core_1.pgTable)("ultra_queen_ai_conversations", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)("user_id").notNull().references(() => exports.users.id),
    title: (0, pg_core_1.text)("title").notNull(),
    activeProviders: (0, pg_core_1.jsonb)("active_providers"),
    quantumMode: (0, pg_core_1.boolean)("quantum_mode").default(false),
    selfUpgradeEnabled: (0, pg_core_1.boolean)("self_upgrade_enabled").default(false),
    contextWindow: (0, pg_core_1.jsonb)("context_window"),
    metadata: (0, pg_core_1.jsonb)("metadata"),
    lastMessageAt: (0, pg_core_1.timestamp)("last_message_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`)
});
exports.ultraQueenAIMessages = (0, pg_core_1.pgTable)("ultra_queen_ai_messages", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    conversationId: (0, pg_core_1.varchar)("conversation_id").notNull().references(() => exports.ultraQueenAIConversations.id),
    role: (0, pg_core_1.text)("role").notNull(),
    content: (0, pg_core_1.text)("content").notNull(),
    provider: (0, pg_core_1.text)("provider"),
    providerMetadata: (0, pg_core_1.jsonb)("provider_metadata"),
    processingTime: (0, pg_core_1.integer)("processing_time"),
    quantumOperations: (0, pg_core_1.jsonb)("quantum_operations"),
    selfUpgradeActions: (0, pg_core_1.jsonb)("self_upgrade_actions"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`)
});
exports.ultraQueenAIIntegrations = (0, pg_core_1.pgTable)("ultra_queen_ai_integrations", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    integrationType: (0, pg_core_1.text)("integration_type").notNull(),
    integrationName: (0, pg_core_1.text)("integration_name").notNull(),
    category: (0, pg_core_1.text)("category").notNull(),
    status: (0, pg_core_1.text)("status").notNull().default("inactive"),
    endpoint: (0, pg_core_1.text)("endpoint"),
    apiKey: (0, pg_core_1.text)("api_key"),
    configuration: (0, pg_core_1.jsonb)("configuration"),
    rateLimits: (0, pg_core_1.jsonb)("rate_limits"),
    lastUsed: (0, pg_core_1.timestamp)("last_used"),
    totalCalls: (0, pg_core_1.integer)("total_calls").default(0),
    successRate: (0, pg_core_1.real)("success_rate").default(100),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
    updatedAt: (0, pg_core_1.timestamp)("updated_at").notNull().default((0, drizzle_orm_1.sql) `now()`)
});
exports.quantumSimulations = (0, pg_core_1.pgTable)("quantum_simulations", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    simulationName: (0, pg_core_1.text)("simulation_name").notNull(),
    qubits: (0, pg_core_1.integer)("qubits").notNull(),
    gates: (0, pg_core_1.jsonb)("gates"),
    circuitComplexity: (0, pg_core_1.integer)("circuit_complexity"),
    executionResults: (0, pg_core_1.jsonb)("execution_results"),
    entanglementState: (0, pg_core_1.jsonb)("entanglement_state"),
    superpositionData: (0, pg_core_1.jsonb)("superposition_data"),
    measurementOutcome: (0, pg_core_1.jsonb)("measurement_outcome"),
    simulationTime: (0, pg_core_1.integer)("simulation_time"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`)
});
exports.selfUpgradeHistory = (0, pg_core_1.pgTable)("self_upgrade_history", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    upgradeType: (0, pg_core_1.text)("upgrade_type").notNull(),
    previousVersion: (0, pg_core_1.text)("previous_version"),
    newVersion: (0, pg_core_1.text)("new_version"),
    improvements: (0, pg_core_1.jsonb)("improvements"),
    performanceMetrics: (0, pg_core_1.jsonb)("performance_metrics"),
    validationResults: (0, pg_core_1.jsonb)("validation_results"),
    rollbackAvailable: (0, pg_core_1.boolean)("rollback_available").default(true),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`)
});
exports.documentGenerationRequestSchema = zod_1.z.object({
    documentType: zod_1.z.enum([
        'smart_id_card',
        'identity_document_book',
        'temporary_id_certificate',
        'south_african_passport',
        'emergency_travel_certificate',
        'refugee_travel_document',
        'birth_certificate',
        'death_certificate',
        'marriage_certificate',
        'divorce_certificate',
        'general_work_visa',
        'critical_skills_work_visa',
        'intra_company_transfer_work_visa',
        'business_visa',
        'study_visa_permit',
        'visitor_visa',
        'medical_treatment_visa',
        'retired_person_visa',
        'exchange_visa',
        'relatives_visa',
        'permanent_residence_permit',
        'certificate_of_exemption',
        'certificate_of_south_african_citizenship'
    ]),
});
exports.smartIdCardSchema = exports.documentGenerationRequestSchema.extend({
    fullName: zod_1.z.string().min(1, "Full name is required"),
    identityNumber: zod_1.z.string().min(13, "Valid SA ID number required"),
    dateOfBirth: zod_1.z.string().min(1, "Date of birth is required"),
    sex: zod_1.z.enum(['M', 'F']),
    nationality: zod_1.z.string().default('South African'),
    countryOfBirth: zod_1.z.string().default('South Africa'),
    status: zod_1.z.string().default('Citizen'),
});
exports.identityDocumentBookSchema = exports.smartIdCardSchema.extend({
    placeOfBirth: zod_1.z.string().min(1, "Place of birth is required"),
    maritalStatus: zod_1.z.enum(['Single', 'Married', 'Divorced', 'Widowed']),
    occupation: zod_1.z.string().optional(),
});
exports.temporaryIdCertificateSchema = exports.smartIdCardSchema.extend({
    reasonForTemporary: zod_1.z.string().min(1, "Reason for temporary certificate required"),
    validityPeriod: zod_1.z.string().default('3 months'),
});
exports.southAfricanPassportSchema = exports.documentGenerationRequestSchema.extend({
    fullName: zod_1.z.string().min(1, "Full name is required"),
    surname: zod_1.z.string().min(1, "Surname is required"),
    givenNames: zod_1.z.string().min(1, "Given names are required"),
    dateOfBirth: zod_1.z.string().min(1, "Date of birth is required"),
    placeOfBirth: zod_1.z.string().min(1, "Place of birth is required"),
    nationality: zod_1.z.string().default('South African'),
    sex: zod_1.z.enum(['M', 'F']),
    height: zod_1.z.string().optional(),
    countryCode: zod_1.z.string().default('ZAF'),
    passportType: zod_1.z.enum(['P', 'D', 'S']).default('P'),
});
exports.emergencyTravelCertificateSchema = exports.southAfricanPassportSchema.extend({
    emergencyReason: zod_1.z.string().min(1, "Emergency reason required"),
    destinationCountry: zod_1.z.string().min(1, "Destination country required"),
    travelDate: zod_1.z.string().min(1, "Travel date required"),
    validityPeriod: zod_1.z.string().default('Single journey'),
});
exports.refugeeTravelDocumentSchema = exports.southAfricanPassportSchema.extend({
    refugeeNumber: zod_1.z.string().min(1, "Refugee number required"),
    countryOfOrigin: zod_1.z.string().min(1, "Country of origin required"),
    refugeeStatus: zod_1.z.string().default('Recognized Refugee'),
});
exports.birthCertificateSchema = exports.documentGenerationRequestSchema.extend({
    childFullName: zod_1.z.string().min(1, "Child's full name is required"),
    dateOfBirth: zod_1.z.string().min(1, "Date of birth is required"),
    placeOfBirth: zod_1.z.string().min(1, "Place of birth is required"),
    sex: zod_1.z.enum(['Male', 'Female']),
    fatherFullName: zod_1.z.string().optional(),
    motherFullName: zod_1.z.string().min(1, "Mother's name is required"),
    motherMaidenName: zod_1.z.string().optional(),
    registrationNumber: zod_1.z.string().optional(),
});
exports.deathCertificateSchema = exports.documentGenerationRequestSchema.extend({
    deceasedFullName: zod_1.z.string().min(1, "Deceased's full name is required"),
    identityNumber: zod_1.z.string().min(13, "Valid SA ID number required"),
    dateOfDeath: zod_1.z.string().min(1, "Date of death is required"),
    placeOfDeath: zod_1.z.string().min(1, "Place of death is required"),
    causeOfDeath: zod_1.z.string().min(1, "Cause of death is required"),
    informantName: zod_1.z.string().min(1, "Informant name is required"),
    informantRelation: zod_1.z.string().min(1, "Informant relation is required"),
});
exports.marriageCertificateSchema = exports.documentGenerationRequestSchema.extend({
    groomFullName: zod_1.z.string().min(1, "Groom's full name is required"),
    groomIdentityNumber: zod_1.z.string().min(13, "Groom's ID number required"),
    brideFullName: zod_1.z.string().min(1, "Bride's full name is required"),
    brideIdentityNumber: zod_1.z.string().min(13, "Bride's ID number required"),
    marriageDate: zod_1.z.string().min(1, "Marriage date is required"),
    marriagePlace: zod_1.z.string().min(1, "Marriage place is required"),
    marriageOfficer: zod_1.z.string().min(1, "Marriage officer name is required"),
    marriageType: zod_1.z.enum(['Civil', 'Religious', 'Customary']).default('Civil'),
});
exports.divorceCertificateSchema = exports.documentGenerationRequestSchema.extend({
    husbandFullName: zod_1.z.string().min(1, "Husband's full name is required"),
    wifeFullName: zod_1.z.string().min(1, "Wife's full name is required"),
    divorceDate: zod_1.z.string().min(1, "Divorce date is required"),
    divorcePlace: zod_1.z.string().min(1, "Divorce place is required"),
    courtName: zod_1.z.string().min(1, "Court name is required"),
    caseNumber: zod_1.z.string().min(1, "Case number is required"),
});
exports.generalWorkVisaSchema = exports.documentGenerationRequestSchema.extend({
    holderFullName: zod_1.z.string().min(1, "Holder's full name is required"),
    holderNationality: zod_1.z.string().min(1, "Nationality is required"),
    holderPassportNumber: zod_1.z.string().min(1, "Passport number is required"),
    employerName: zod_1.z.string().min(1, "Employer name is required"),
    jobTitle: zod_1.z.string().min(1, "Job title is required"),
    workLocation: zod_1.z.string().min(1, "Work location is required"),
    contractDuration: zod_1.z.string().min(1, "Contract duration is required"),
});
exports.criticalSkillsWorkVisaSchema = exports.generalWorkVisaSchema.extend({
    criticalSkill: zod_1.z.string().min(1, "Critical skill is required"),
    qualificationLevel: zod_1.z.string().min(1, "Qualification level is required"),
    workExperience: zod_1.z.string().min(1, "Work experience is required"),
});
exports.intraCompanyTransferWorkVisaSchema = exports.generalWorkVisaSchema.extend({
    parentCompanyName: zod_1.z.string().min(1, "Parent company name is required"),
    subsidiaryName: zod_1.z.string().min(1, "Subsidiary name is required"),
    transferReason: zod_1.z.string().min(1, "Transfer reason is required"),
});
exports.businessVisaSchema = exports.documentGenerationRequestSchema.extend({
    holderFullName: zod_1.z.string().min(1, "Holder's full name is required"),
    holderNationality: zod_1.z.string().min(1, "Nationality is required"),
    businessType: zod_1.z.string().min(1, "Business type is required"),
    businessAddress: zod_1.z.string().min(1, "Business address is required"),
    investmentAmount: zod_1.z.string().min(1, "Investment amount is required"),
});
exports.studyVisaPermitSchema = exports.documentGenerationRequestSchema.extend({
    holderFullName: zod_1.z.string().min(1, "Holder's full name is required"),
    holderNationality: zod_1.z.string().min(1, "Nationality is required"),
    institutionName: zod_1.z.string().min(1, "Institution name is required"),
    courseTitle: zod_1.z.string().min(1, "Course title is required"),
    studyLevel: zod_1.z.string().min(1, "Study level is required"),
    courseDuration: zod_1.z.string().min(1, "Course duration is required"),
});
exports.visitorVisaSchema = exports.documentGenerationRequestSchema.extend({
    holderFullName: zod_1.z.string().min(1, "Holder's full name is required"),
    holderNationality: zod_1.z.string().min(1, "Nationality is required"),
    purposeOfVisit: zod_1.z.string().min(1, "Purpose of visit is required"),
    durationOfStay: zod_1.z.string().min(1, "Duration of stay is required"),
    accommodationAddress: zod_1.z.string().min(1, "Accommodation address is required"),
});
exports.medicalTreatmentVisaSchema = exports.visitorVisaSchema.extend({
    medicalCondition: zod_1.z.string().min(1, "Medical condition is required"),
    hospitalName: zod_1.z.string().min(1, "Hospital name is required"),
    treatmentDuration: zod_1.z.string().min(1, "Treatment duration is required"),
    doctorName: zod_1.z.string().min(1, "Doctor name is required"),
});
exports.retiredPersonVisaSchema = exports.documentGenerationRequestSchema.extend({
    holderFullName: zod_1.z.string().min(1, "Holder's full name is required"),
    holderNationality: zod_1.z.string().min(1, "Nationality is required"),
    retirementDate: zod_1.z.string().min(1, "Retirement date is required"),
    pensionAmount: zod_1.z.string().min(1, "Pension amount is required"),
    accommodationProof: zod_1.z.string().min(1, "Accommodation proof is required"),
});
exports.exchangeVisaSchema = exports.documentGenerationRequestSchema.extend({
    holderFullName: zod_1.z.string().min(1, "Holder's full name is required"),
    holderNationality: zod_1.z.string().min(1, "Nationality is required"),
    exchangeProgram: zod_1.z.string().min(1, "Exchange program is required"),
    hostOrganization: zod_1.z.string().min(1, "Host organization is required"),
    exchangeDuration: zod_1.z.string().min(1, "Exchange duration is required"),
});
exports.relativesVisaSchema = exports.documentGenerationRequestSchema.extend({
    holderFullName: zod_1.z.string().min(1, "Holder's full name is required"),
    holderNationality: zod_1.z.string().min(1, "Nationality is required"),
    relativeName: zod_1.z.string().min(1, "Relative's name is required"),
    relationshipType: zod_1.z.string().min(1, "Relationship type is required"),
    relativeStatus: zod_1.z.string().min(1, "Relative's status is required"),
});
exports.permanentResidencePermitSchema = exports.documentGenerationRequestSchema.extend({
    holderFullName: zod_1.z.string().min(1, "Holder's full name is required"),
    holderNationality: zod_1.z.string().min(1, "Nationality is required"),
    categoryType: zod_1.z.string().min(1, "Category type is required"),
    applicationDate: zod_1.z.string().min(1, "Application date is required"),
    approvalDate: zod_1.z.string().min(1, "Approval date is required"),
});
exports.certificateOfExemptionSchema = exports.documentGenerationRequestSchema.extend({
    holderFullName: zod_1.z.string().min(1, "Holder's full name is required"),
    exemptionType: zod_1.z.string().min(1, "Exemption type is required"),
    exemptionReason: zod_1.z.string().min(1, "Exemption reason is required"),
    validityPeriod: zod_1.z.string().min(1, "Validity period is required"),
});
exports.certificateOfSouthAfricanCitizenshipSchema = exports.documentGenerationRequestSchema.extend({
    holderFullName: zod_1.z.string().min(1, "Holder's full name is required"),
    dateOfBirth: zod_1.z.string().min(1, "Date of birth is required"),
    placeOfBirth: zod_1.z.string().min(1, "Place of birth is required"),
    citizenshipMethod: zod_1.z.string().min(1, "Citizenship method is required"),
    certificateDate: zod_1.z.string().min(1, "Certificate date is required"),
});
exports.documentTypeSchemas = {
    smart_id_card: exports.smartIdCardSchema,
    identity_document_book: exports.identityDocumentBookSchema,
    temporary_id_certificate: exports.temporaryIdCertificateSchema,
    south_african_passport: exports.southAfricanPassportSchema,
    emergency_travel_certificate: exports.emergencyTravelCertificateSchema,
    refugee_travel_document: exports.refugeeTravelDocumentSchema,
    birth_certificate: exports.birthCertificateSchema,
    death_certificate: exports.deathCertificateSchema,
    marriage_certificate: exports.marriageCertificateSchema,
    divorce_certificate: exports.divorceCertificateSchema,
    general_work_visa: exports.generalWorkVisaSchema,
    critical_skills_work_visa: exports.criticalSkillsWorkVisaSchema,
    intra_company_transfer_work_visa: exports.intraCompanyTransferWorkVisaSchema,
    business_visa: exports.businessVisaSchema,
    study_visa_permit: exports.studyVisaPermitSchema,
    visitor_visa: exports.visitorVisaSchema,
    medical_treatment_visa: exports.medicalTreatmentVisaSchema,
    retired_person_visa: exports.retiredPersonVisaSchema,
    exchange_visa: exports.exchangeVisaSchema,
    relatives_visa: exports.relativesVisaSchema,
    permanent_residence_permit: exports.permanentResidencePermitSchema,
    certificate_of_exemption: exports.certificateOfExemptionSchema,
    certificate_of_south_african_citizenship: exports.certificateOfSouthAfricanCitizenshipSchema,
};
exports.dhaApplicants = (0, pg_core_1.pgTable)("dha_applicants", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    fullName: (0, pg_core_1.text)("full_name").notNull(),
    idNumber: (0, pg_core_1.text)("id_number"),
    passportNumber: (0, pg_core_1.text)("passport_number"),
    dateOfBirth: (0, pg_core_1.text)("date_of_birth").notNull(),
    nationality: (0, pg_core_1.text)("nationality").notNull(),
    gender: (0, pg_core_1.text)("gender").notNull(),
    address: (0, pg_core_1.text)("address"),
    contactNumber: (0, pg_core_1.text)("contact_number"),
    email: (0, pg_core_1.text)("email"),
    isSouthAfricanCitizen: (0, pg_core_1.boolean)("is_south_african_citizen").notNull().default(false),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
    updatedAt: (0, pg_core_1.timestamp)("updated_at").notNull().default((0, drizzle_orm_1.sql) `now()`)
});
exports.dhaDocuments = (0, pg_core_1.pgTable)("dha_documents", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    applicantId: (0, pg_core_1.varchar)("applicant_id").notNull().references(() => exports.dhaApplicants.id),
    documentType: (0, pg_core_1.text)("document_type").notNull(),
    documentNumber: (0, pg_core_1.text)("document_number").notNull().unique(),
    issueDate: (0, pg_core_1.text)("issue_date").notNull(),
    expiryDate: (0, pg_core_1.text)("expiry_date"),
    status: (0, pg_core_1.text)("status").notNull().default("issued"),
    referenceNumber: (0, pg_core_1.text)("reference_number"),
    permitCategory: (0, pg_core_1.text)("permit_category"),
    visaType: (0, pg_core_1.text)("visa_type"),
    relativeDetails: (0, pg_core_1.jsonb)("relative_details"),
    qualifications: (0, pg_core_1.jsonb)("qualifications"),
    employerDetails: (0, pg_core_1.jsonb)("employer_details"),
    issueLocation: (0, pg_core_1.text)("issue_location").notNull().default("Department of Home Affairs"),
    issuingOfficer: (0, pg_core_1.text)("issuing_officer"),
    notes: (0, pg_core_1.text)("notes"),
    metadata: (0, pg_core_1.jsonb)("metadata"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
    updatedAt: (0, pg_core_1.timestamp)("updated_at").notNull().default((0, drizzle_orm_1.sql) `now()`)
});
exports.dhaDocumentVerifications = (0, pg_core_1.pgTable)("dha_document_verifications", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    documentId: (0, pg_core_1.varchar)("document_id").notNull().references(() => exports.dhaDocuments.id),
    verificationCode: (0, pg_core_1.text)("verification_code").notNull().unique(),
    qrCodeData: (0, pg_core_1.text)("qr_code_data"),
    qrCodeUrl: (0, pg_core_1.text)("qr_code_url"),
    verificationType: (0, pg_core_1.text)("verification_type").notNull().default("QR"),
    isValid: (0, pg_core_1.boolean)("is_valid").notNull().default(true),
    verificationCount: (0, pg_core_1.integer)("verification_count").notNull().default(0),
    lastVerifiedAt: (0, pg_core_1.timestamp)("last_verified_at"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
    expiresAt: (0, pg_core_1.timestamp)("expires_at")
});
exports.selfHealingActions = (0, pg_core_1.pgTable)("self_healing_actions", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    type: (0, pg_core_1.text)("type").notNull(),
    category: (0, pg_core_1.text)("category").notNull(),
    severity: (0, pg_core_1.text)("severity").notNull(),
    description: (0, pg_core_1.text)("description").notNull(),
    target: (0, pg_core_1.text)("target").notNull(),
    action: (0, pg_core_1.text)("action").notNull(),
    trigger: (0, pg_core_1.jsonb)("trigger"),
    status: (0, pg_core_1.text)("status").notNull().default("initiated"),
    result: (0, pg_core_1.jsonb)("result"),
    metrics: (0, pg_core_1.jsonb)("metrics"),
    aiAssisted: (0, pg_core_1.boolean)("ai_assisted").notNull().default(false),
    confidence: (0, pg_core_1.integer)("confidence"),
    rollbackPlan: (0, pg_core_1.jsonb)("rollback_plan"),
    startTime: (0, pg_core_1.timestamp)("start_time").notNull().default((0, drizzle_orm_1.sql) `now()`),
    endTime: (0, pg_core_1.timestamp)("end_time"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.systemHealthSnapshots = (0, pg_core_1.pgTable)("system_health_snapshots", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    overallStatus: (0, pg_core_1.text)("overall_status").notNull(),
    overallScore: (0, pg_core_1.integer)("overall_score").notNull(),
    components: (0, pg_core_1.jsonb)("components").notNull(),
    predictions: (0, pg_core_1.jsonb)("predictions"),
    performance: (0, pg_core_1.jsonb)("performance"),
    resources: (0, pg_core_1.jsonb)("resources"),
    trends: (0, pg_core_1.jsonb)("trends"),
    recommendations: (0, pg_core_1.jsonb)("recommendations").array(),
    timestamp: (0, pg_core_1.timestamp)("timestamp").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.securityIncidents = (0, pg_core_1.pgTable)("security_incidents", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    threatId: (0, pg_core_1.varchar)("threat_id"),
    type: (0, pg_core_1.text)("type").notNull(),
    severity: (0, pg_core_1.text)("severity").notNull(),
    confidence: (0, pg_core_1.integer)("confidence").notNull(),
    source: (0, pg_core_1.text)("source").notNull(),
    target: (0, pg_core_1.text)("target"),
    details: (0, pg_core_1.jsonb)("details"),
    indicators: (0, pg_core_1.jsonb)("indicators").array(),
    riskScore: (0, pg_core_1.integer)("risk_score").notNull(),
    status: (0, pg_core_1.text)("status").notNull().default("open"),
    responseActions: (0, pg_core_1.jsonb)("response_actions").array(),
    impact: (0, pg_core_1.jsonb)("impact"),
    resolvedAt: (0, pg_core_1.timestamp)("resolved_at"),
    ipAddress: (0, pg_core_1.text)("ip_address"),
    userAgent: (0, pg_core_1.text)("user_agent"),
    userId: (0, pg_core_1.varchar)("user_id").references(() => exports.users.id),
    geolocation: (0, pg_core_1.jsonb)("geolocation"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.errorCorrections = (0, pg_core_1.pgTable)("error_corrections", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    errorId: (0, pg_core_1.varchar)("error_id"),
    patternId: (0, pg_core_1.varchar)("pattern_id"),
    type: (0, pg_core_1.text)("type").notNull(),
    errorType: (0, pg_core_1.text)("error_type").notNull(),
    severity: (0, pg_core_1.text)("severity").notNull(),
    description: (0, pg_core_1.text)("description").notNull(),
    target: (0, pg_core_1.text)("target").notNull(),
    correctionSteps: (0, pg_core_1.jsonb)("correction_steps").array(),
    status: (0, pg_core_1.text)("status").notNull().default("pending"),
    success: (0, pg_core_1.boolean)("success").notNull().default(false),
    result: (0, pg_core_1.jsonb)("result"),
    rollbackPlan: (0, pg_core_1.jsonb)("rollback_plan"),
    aiAssisted: (0, pg_core_1.boolean)("ai_assisted").notNull().default(false),
    confidence: (0, pg_core_1.integer)("confidence"),
    startTime: (0, pg_core_1.timestamp)("start_time").notNull().default((0, drizzle_orm_1.sql) `now()`),
    endTime: (0, pg_core_1.timestamp)("end_time"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.healthCheckResults = (0, pg_core_1.pgTable)("health_check_results", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    checkId: (0, pg_core_1.varchar)("check_id").notNull(),
    checkName: (0, pg_core_1.text)("check_name").notNull(),
    category: (0, pg_core_1.text)("category").notNull(),
    status: (0, pg_core_1.text)("status").notNull(),
    score: (0, pg_core_1.integer)("score").notNull(),
    responseTime: (0, pg_core_1.integer)("response_time").notNull(),
    message: (0, pg_core_1.text)("message").notNull(),
    details: (0, pg_core_1.jsonb)("details"),
    metrics: (0, pg_core_1.jsonb)("metrics"),
    error: (0, pg_core_1.text)("error"),
    recommendations: (0, pg_core_1.jsonb)("recommendations").array(),
    timestamp: (0, pg_core_1.timestamp)("timestamp").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.failoverEvents = (0, pg_core_1.pgTable)("failover_events", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    policyId: (0, pg_core_1.varchar)("policy_id"),
    serviceId: (0, pg_core_1.varchar)("service_id").notNull(),
    triggerReason: (0, pg_core_1.text)("trigger_reason").notNull(),
    sourceNode: (0, pg_core_1.varchar)("source_node").notNull(),
    targetNode: (0, pg_core_1.varchar)("target_node").notNull(),
    status: (0, pg_core_1.text)("status").notNull().default("initiated"),
    triggeredBy: (0, pg_core_1.text)("triggered_by").notNull(),
    actions: (0, pg_core_1.jsonb)("actions").array(),
    impact: (0, pg_core_1.jsonb)("impact"),
    rollbackPlan: (0, pg_core_1.jsonb)("rollback_plan"),
    success: (0, pg_core_1.boolean)("success").notNull().default(false),
    triggerTime: (0, pg_core_1.timestamp)("trigger_time").notNull().default((0, drizzle_orm_1.sql) `now()`),
    completionTime: (0, pg_core_1.timestamp)("completion_time"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.performanceBaselines = (0, pg_core_1.pgTable)("performance_baselines", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    serviceName: (0, pg_core_1.text)("service_name").notNull(),
    metricName: (0, pg_core_1.text)("metric_name").notNull(),
    baselineValue: (0, pg_core_1.integer)("baseline_value").notNull(),
    unit: (0, pg_core_1.text)("unit").notNull(),
    measurementPeriod: (0, pg_core_1.text)("measurement_period").notNull(),
    confidenceLevel: (0, pg_core_1.integer)("confidence_level").notNull(),
    dataPoints: (0, pg_core_1.integer)("data_points").notNull(),
    variance: (0, pg_core_1.integer)("variance"),
    lastUpdated: (0, pg_core_1.timestamp)("last_updated").notNull().default((0, drizzle_orm_1.sql) `now()`),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.alertRules = (0, pg_core_1.pgTable)("alert_rules", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    name: (0, pg_core_1.text)("name").notNull(),
    type: (0, pg_core_1.text)("type").notNull(),
    category: (0, pg_core_1.text)("category").notNull(),
    conditions: (0, pg_core_1.jsonb)("conditions").array(),
    actions: (0, pg_core_1.jsonb)("actions").array(),
    severity: (0, pg_core_1.text)("severity").notNull(),
    priority: (0, pg_core_1.integer)("priority").notNull().default(5),
    isEnabled: (0, pg_core_1.boolean)("is_enabled").notNull().default(true),
    threshold: (0, pg_core_1.integer)("threshold"),
    timeWindow: (0, pg_core_1.integer)("time_window"),
    maxTriggers: (0, pg_core_1.integer)("max_triggers").default(10),
    cooldown: (0, pg_core_1.integer)("cooldown").default(60000),
    lastTriggered: (0, pg_core_1.timestamp)("last_triggered"),
    triggerCount: (0, pg_core_1.integer)("trigger_count").notNull().default(0),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.circuitBreakerStates = (0, pg_core_1.pgTable)("circuit_breaker_states", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    serviceName: (0, pg_core_1.text)("service_name").notNull().unique(),
    state: (0, pg_core_1.text)("state").notNull().default("closed"),
    failures: (0, pg_core_1.integer)("failures").notNull().default(0),
    successes: (0, pg_core_1.integer)("successes").notNull().default(0),
    lastFailureTime: (0, pg_core_1.timestamp)("last_failure_time"),
    failureThreshold: (0, pg_core_1.integer)("failure_threshold").notNull().default(5),
    successThreshold: (0, pg_core_1.integer)("success_threshold").notNull().default(2),
    timeout: (0, pg_core_1.integer)("timeout").notNull().default(30000),
    resetTimeout: (0, pg_core_1.integer)("reset_timeout").notNull().default(60000),
    halfOpenRequests: (0, pg_core_1.integer)("half_open_requests").notNull().default(3),
    lastStateChange: (0, pg_core_1.timestamp)("last_state_change").notNull().default((0, drizzle_orm_1.sql) `now()`),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.uptimeIncidents = (0, pg_core_1.pgTable)("uptime_incidents", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    serviceId: (0, pg_core_1.varchar)("service_id").notNull(),
    serviceName: (0, pg_core_1.text)("service_name").notNull(),
    incidentType: (0, pg_core_1.text)("incident_type").notNull(),
    severity: (0, pg_core_1.text)("severity").notNull(),
    status: (0, pg_core_1.text)("status").notNull().default("open"),
    rootCause: (0, pg_core_1.text)("root_cause"),
    impact: (0, pg_core_1.text)("impact"),
    resolution: (0, pg_core_1.text)("resolution"),
    preventiveMeasures: (0, pg_core_1.jsonb)("preventive_measures").array(),
    affectedUsers: (0, pg_core_1.integer)("affected_users").default(0),
    startTime: (0, pg_core_1.timestamp)("start_time").notNull().default((0, drizzle_orm_1.sql) `now()`),
    endTime: (0, pg_core_1.timestamp)("end_time"),
    duration: (0, pg_core_1.integer)("duration"),
    mttr: (0, pg_core_1.integer)("mttr"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.autonomousOperations = (0, pg_core_1.pgTable)("autonomous_operations", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    operationType: (0, pg_core_1.text)("operation_type").notNull(),
    category: (0, pg_core_1.text)("category").notNull(),
    description: (0, pg_core_1.text)("description").notNull(),
    target: (0, pg_core_1.text)("target").notNull(),
    status: (0, pg_core_1.text)("status").notNull().default("initiated"),
    trigger: (0, pg_core_1.jsonb)("trigger"),
    parameters: (0, pg_core_1.jsonb)("parameters"),
    result: (0, pg_core_1.jsonb)("result"),
    confidence: (0, pg_core_1.integer)("confidence"),
    aiModel: (0, pg_core_1.text)("ai_model"),
    executionTime: (0, pg_core_1.integer)("execution_time"),
    resourcesUsed: (0, pg_core_1.jsonb)("resources_used"),
    impact: (0, pg_core_1.jsonb)("impact"),
    success: (0, pg_core_1.boolean)("success").notNull().default(false),
    startTime: (0, pg_core_1.timestamp)("start_time").notNull().default((0, drizzle_orm_1.sql) `now()`),
    endTime: (0, pg_core_1.timestamp)("end_time"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.maintenanceTasks = (0, pg_core_1.pgTable)("maintenance_tasks", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    name: (0, pg_core_1.text)("name").notNull(),
    type: (0, pg_core_1.text)("type").notNull(),
    priority: (0, pg_core_1.text)("priority").notNull(),
    description: (0, pg_core_1.text)("description").notNull(),
    target: (0, pg_core_1.text)("target").notNull(),
    schedule: (0, pg_core_1.text)("schedule"),
    status: (0, pg_core_1.text)("status").notNull().default("pending"),
    autoExecute: (0, pg_core_1.boolean)("auto_execute").notNull().default(false),
    maxDuration: (0, pg_core_1.integer)("max_duration"),
    dependencies: (0, pg_core_1.jsonb)("dependencies").array(),
    parameters: (0, pg_core_1.jsonb)("parameters"),
    result: (0, pg_core_1.jsonb)("result"),
    executionLog: (0, pg_core_1.text)("execution_log"),
    scheduledAt: (0, pg_core_1.timestamp)("scheduled_at"),
    startedAt: (0, pg_core_1.timestamp)("started_at"),
    completedAt: (0, pg_core_1.timestamp)("completed_at"),
    nextRun: (0, pg_core_1.timestamp)("next_run"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.governmentComplianceAudits = (0, pg_core_1.pgTable)("government_compliance_audits", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    auditType: (0, pg_core_1.text)("audit_type").notNull(),
    regulation: (0, pg_core_1.text)("regulation").notNull(),
    scope: (0, pg_core_1.text)("scope").notNull(),
    status: (0, pg_core_1.text)("status").notNull().default("pending"),
    complianceScore: (0, pg_core_1.integer)("compliance_score"),
    findings: (0, pg_core_1.jsonb)("findings").array(),
    violations: (0, pg_core_1.jsonb)("violations").array(),
    recommendations: (0, pg_core_1.jsonb)("recommendations").array(),
    remedialActions: (0, pg_core_1.jsonb)("remedial_actions").array(),
    auditor: (0, pg_core_1.text)("auditor"),
    evidence: (0, pg_core_1.jsonb)("evidence"),
    reportPath: (0, pg_core_1.text)("report_path"),
    scheduledAt: (0, pg_core_1.timestamp)("scheduled_at").notNull(),
    startedAt: (0, pg_core_1.timestamp)("started_at"),
    completedAt: (0, pg_core_1.timestamp)("completed_at"),
    nextAudit: (0, pg_core_1.timestamp)("next_audit"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.securityMetrics = (0, pg_core_1.pgTable)("security_metrics", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    metricType: (0, pg_core_1.text)("metric_type").notNull(),
    category: (0, pg_core_1.text)("category").notNull(),
    value: (0, pg_core_1.integer)("value").notNull(),
    unit: (0, pg_core_1.text)("unit").notNull(),
    severity: (0, pg_core_1.text)("severity").notNull(),
    source: (0, pg_core_1.text)("source").notNull(),
    details: (0, pg_core_1.jsonb)("details"),
    threshold: (0, pg_core_1.integer)("threshold"),
    trend: (0, pg_core_1.text)("trend"),
    timestamp: (0, pg_core_1.timestamp)("timestamp").notNull().default((0, drizzle_orm_1.sql) `now()`),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.biometricProfiles = (0, pg_core_1.pgTable)("biometric_profiles", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)("user_id").notNull().references(() => exports.users.id).unique(),
    fingerprintTemplate: (0, pg_core_1.text)("fingerprint_template"),
    faceTemplate: (0, pg_core_1.text)("face_template"),
    voiceTemplate: (0, pg_core_1.text)("voice_template"),
    irisTemplate: (0, pg_core_1.text)("iris_template"),
    palmTemplate: (0, pg_core_1.text)("palm_template"),
    encryptionKey: (0, pg_core_1.text)("encryption_key").notNull(),
    isActive: (0, pg_core_1.boolean)("is_active").notNull().default(true),
    confidence: (0, pg_core_1.integer)("confidence").notNull(),
    verificationAttempts: (0, pg_core_1.integer)("verification_attempts").notNull().default(0),
    lastVerification: (0, pg_core_1.timestamp)("last_verification"),
    biometricHash: (0, pg_core_1.text)("biometric_hash").notNull().unique(),
    metadata: (0, pg_core_1.jsonb)("metadata"),
    createdAt: (0, pg_core_1.timestamp)("created_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
    updatedAt: (0, pg_core_1.timestamp)("updated_at").notNull().default((0, drizzle_orm_1.sql) `now()`),
});
exports.insertDhaApplicantSchema = zod_1.z.object({
    fullName: zod_1.z.string(),
    idNumber: zod_1.z.string().optional(),
    passportNumber: zod_1.z.string().optional(),
    dateOfBirth: zod_1.z.string(),
    nationality: zod_1.z.string(),
    gender: zod_1.z.string(),
    address: zod_1.z.string().optional(),
    contactNumber: zod_1.z.string().optional(),
    email: zod_1.z.string().optional(),
    isSouthAfricanCitizen: zod_1.z.boolean().default(false),
});
exports.insertDhaDocumentSchema = zod_1.z.object({
    applicantId: zod_1.z.string(),
    documentType: zod_1.z.string(),
    documentNumber: zod_1.z.string(),
    issueDate: zod_1.z.string(),
    expiryDate: zod_1.z.string().optional(),
    status: zod_1.z.string(),
    referenceNumber: zod_1.z.string().optional(),
    permitCategory: zod_1.z.string().optional(),
    visaType: zod_1.z.string().optional(),
    relativeDetails: zod_1.z.any().optional(),
    qualifications: zod_1.z.any().optional(),
    employerDetails: zod_1.z.any().optional(),
    issueLocation: zod_1.z.string().optional(),
    issuingOfficer: zod_1.z.string().optional(),
    notes: zod_1.z.string().optional(),
    metadata: zod_1.z.any().optional(),
});
exports.insertDhaDocumentVerificationSchema = zod_1.z.object({
    documentId: zod_1.z.string(),
    verificationCode: zod_1.z.string(),
    qrCodeData: zod_1.z.string(),
    qrCodeUrl: zod_1.z.string().optional(),
    verificationType: zod_1.z.string().default("QR"),
    isValid: zod_1.z.boolean().default(true),
    lastVerifiedAt: zod_1.z.date().optional(),
    verificationCount: zod_1.z.number().default(0),
    expiresAt: zod_1.z.date().optional(),
});
exports.DHA_DOCUMENT_TYPES = {
    BIRTH_CERTIFICATE: 'birth_certificate',
    ABRIDGED_BIRTH_CERTIFICATE: 'abridged_birth_certificate',
    UNABRIDGED_BIRTH_CERTIFICATE: 'unabridged_birth_certificate',
    DEATH_CERTIFICATE: 'death_certificate',
    NATURALISATION_CERTIFICATE: 'naturalisation_certificate',
    PERMANENT_RESIDENCE_PERMIT: 'permanent_residence_permit',
    TEMPORARY_RESIDENCE_PERMIT: 'temporary_residence_permit',
    GENERAL_WORK_VISA: 'general_work_visa',
    CRITICAL_SKILLS_WORK_VISA: 'critical_skills_work_visa',
    INTRA_COMPANY_TRANSFER_VISA: 'intra_company_transfer_visa',
    CORPORATE_VISA: 'corporate_visa',
    RELATIVES_VISA: 'relatives_visa',
    SPOUSAL_VISA: 'spousal_visa',
    LIFE_PARTNER_VISA: 'life_partner_visa',
    RETIRED_PERSON_VISA: 'retired_person_visa',
    STUDY_VISA: 'study_visa',
    BUSINESS_VISA: 'business_visa',
    VISITOR_VISA: 'visitor_visa',
    MEDICAL_TREATMENT_VISA: 'medical_treatment_visa',
    EXCHANGE_VISA: 'exchange_visa',
    TREATY_VISA: 'treaty_visa',
    ASYLUM_SEEKER_PERMIT: 'asylum_seeker_permit',
    REFUGEE_STATUS_PERMIT: 'refugee_status_permit',
    SOUTH_AFRICAN_PASSPORT: 'south_african_passport',
    EMERGENCY_TRAVEL_CERTIFICATE: 'emergency_travel_certificate',
    REFUGEE_TRAVEL_DOCUMENT: 'refugee_travel_document',
};
